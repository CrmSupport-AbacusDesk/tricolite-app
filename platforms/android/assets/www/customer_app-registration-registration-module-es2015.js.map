{"version":3,"sources":["./src/app/customer_app/registration/registration.page.html","./src/app/customer_app/registration/registration-routing.module.ts","./src/app/customer_app/registration/registration.module.ts","./src/app/customer_app/registration/registration.page.scss","./src/app/customer_app/registration/registration.page.ts"],"names":[],"mappings":"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","file":"customer_app-registration-registration-module-es2015.js","sourcesContent":["export default \"<ion-content>\\r\\n    <div class=\\\"login-container\\\">\\r\\n        <div class=\\\"logo\\\"><img src=\\\"../../assets/img/logo.jpg\\\" alt=\\\"\\\"></div>\\r\\n        \\r\\n        <div class=\\\"form-container\\\">\\r\\n            \\r\\n            <div class=\\\"head\\\">\\r\\n                <div class=\\\"heading\\\">\\r\\n                    <h1>Sign Up</h1>\\r\\n                    <ion-button fill=\\\"clear\\\" routerLink=\\\"/customerlogin\\\"><i class=\\\"material-icons\\\">arrow_right_alt</i> Back To Login</ion-button>\\r\\n                    \\r\\n                </div>\\r\\n            </div>\\r\\n            \\r\\n            <div class=\\\"input-container mt10\\\">\\r\\n                <div class=\\\"custome-filter dlform\\\">\\r\\n                    <div class=\\\"fiter-data\\\">\\r\\n                        <div class=\\\"cs-right\\\">\\r\\n                            <div class=\\\"heading\\\">\\r\\n                                <h2>Basic Info</h2>\\r\\n                              \\r\\n                                \\r\\n                            </div>\\r\\n                            <div  class=\\\"basic_info mb16\\\">\\r\\n                                <form [formGroup]=\\\"registerForm1\\\">\\r\\n                                    <div class=\\\"common_form inner_page\\\">\\r\\n                                        <!-- <ion-item [ngClass]=\\\"submitted && f1.companyName.errors && f1.companyName.errors.required ? 'has-error' : (f1.companyName.errors && !f1.companyName.errors.required ? 'has-text' : '')\\\">\\r\\n                                            <ion-label position=\\\"floating\\\">Company Name</ion-label>\\r\\n                                            <ion-input formControlName=\\\"companyName\\\" [(ngModel)]=\\\"data.companyName\\\" autocomplete=\\\"nope\\\"></ion-input>\\r\\n\\r\\n                                            <ion-text *ngIf=\\\"submitted && f1.companyName.errors\\\" class=\\\"cs-error\\\">\\r\\n    \\r\\n                                                <span *ngIf=\\\"f1.companyName.errors.minlength\\\">Minimum 5 Letter Required</span>\\r\\n                \\r\\n                                            </ion-text>                                \\r\\n\\r\\n                                        </ion-item> -->\\r\\n                                        <ion-item [ngClass]=\\\"submitted && f1.name.errors && f1.name.errors.required ? 'has-error' : (f1.name.errors && !f1.name.errors.required ? 'has-text' : '')\\\">\\r\\n                                            <ion-label position=\\\"floating\\\"> Name</ion-label>\\r\\n                                            <ion-input formControlName=\\\"name\\\" [(ngModel)]=\\\"data.name\\\" autocomplete=\\\"nope\\\"></ion-input>\\r\\n\\r\\n                                            <ion-text *ngIf=\\\"submitted && f1.name.errors\\\" class=\\\"cs-error\\\">\\r\\n    \\r\\n                                                <span *ngIf=\\\"f1.name.errors.minlength\\\">Minimum 5 Letter Required</span>\\r\\n                \\r\\n                                            </ion-text>                                \\r\\n\\r\\n                                        </ion-item>\\r\\n\\r\\n                                        <!-- <ion-item [ngClass]=\\\"submitted && f1.email.errors && f1.email.errors.required ? 'has-error' : (f1.email.errors && !f1.email.errors.required ? 'has-text' : '')\\\">\\r\\n                                            <ion-label position=\\\"floating\\\"> Corporate Mail</ion-label>\\r\\n                                            <ion-input formControlName=\\\"email\\\" [(ngModel)]=\\\"data.email\\\" autocomplete=\\\"nope\\\"></ion-input>\\r\\n\\r\\n                                            <ion-text *ngIf=\\\"submitted && f1.email.errors\\\" class=\\\"cs-error\\\">\\r\\n    \\r\\n                                                    <span *ngIf=\\\"!f1.email.errors.required\\\">Email Invalid</span>\\r\\n                    \\r\\n                                            </ion-text>\\r\\n\\r\\n                                        </ion-item> -->\\r\\n                                        <ion-item [ngClass]=\\\"submitted && f1.designation.errors && f1.designation.errors.required ? 'has-error' : (f1.designation.errors && !f1.designation.errors.required ? 'has-text' : '')\\\">\\r\\n                                            <ion-label position=\\\"floating\\\">Designation</ion-label>\\r\\n                                            <ion-input formControlName=\\\"designation\\\" [(ngModel)]=\\\"data.designation\\\" autocomplete=\\\"nope\\\"></ion-input>\\r\\n\\r\\n                                            <ion-text *ngIf=\\\"submitted && f1.designation.errors\\\" class=\\\"cs-error\\\">\\r\\n    \\r\\n                                                <span *ngIf=\\\"f1.designation.errors.minlength\\\">Minimum 5 Letter Required</span>\\r\\n                \\r\\n                                            </ion-text>                                \\r\\n\\r\\n                                        </ion-item>\\r\\n                                        <!-- <ion-item [ngClass]=\\\"submitted && f1.landlineNo.errors && f1.landlineNo.errors.required ? 'has-error' : (f1.landlineNo.errors && !f1.landlineNo.errors.required ? 'has-text' : '')\\\">\\r\\n                                            <ion-label position=\\\"floating\\\">Corporate Mobile No.</ion-label>\\r\\n                                            <ion-input type=\\\"tel\\\" formControlName=\\\"landlineNo\\\" [(ngModel)]=\\\"data.landlineNo\\\"   minlength = \\\"10\\\" maxlength=\\\"10\\\" (keypress)=\\\"dbService.numberOnly($event)\\\" autocomplete=\\\"nope\\\"></ion-input>\\r\\n\\r\\n                                            <ion-text *ngIf=\\\"submitted && f1.landlineNo.errors\\\" class=\\\"cs-error\\\">\\r\\n    \\r\\n                                                <span *ngIf=\\\"f1.landlineNo.errors.minlength\\\">Minimum 10 Digit Required</span>\\r\\n    \\r\\n                                                <span *ngIf=\\\"f1.landlineNo.errors.maxlength\\\">Maximum 10 Digit Required</span>\\r\\n                    \\r\\n                                            </ion-text>\\r\\n\\r\\n                                        </ion-item> -->\\r\\n                                        <ion-item [ngClass]=\\\"submitted && f1.landlineNo.errors && f1.landlineNo.errors.required ? 'has-error' : (f1.landlineNo.errors && !f1.landlineNo.errors.required ? 'has-text' : '')\\\">\\r\\n                                            <ion-label position=\\\"floating\\\">Mobile No.</ion-label>\\r\\n                                            <ion-input type=\\\"tel\\\" formControlName=\\\"landlineNo\\\" [(ngModel)]=\\\"data.landlineNo\\\"   minlength = \\\"10\\\" maxlength=\\\"10\\\" (keypress)=\\\"dbService.numberOnly($event)\\\" autocomplete=\\\"nope\\\"></ion-input>\\r\\n\\r\\n                                            <ion-text *ngIf=\\\"submitted && f1.landlineNo.errors\\\" class=\\\"cs-error\\\">\\r\\n    \\r\\n                                                <span *ngIf=\\\"f1.landlineNo.errors.minlength\\\">Minimum 10 Digit Required</span>\\r\\n    \\r\\n                                                <span *ngIf=\\\"f1.landlineNo.errors.maxlength\\\">Maximum 10 Digit Required</span>\\r\\n                    \\r\\n                                            </ion-text>\\r\\n\\r\\n                                        </ion-item>\\r\\n                                         <ion-item [ngClass]=\\\"submitted && f1.email.errors && f1.email.errors.required ? 'has-error' : (f1.email.errors && !f1.email.errors.required ? 'has-text' : '')\\\">\\r\\n                                            <ion-label position=\\\"floating\\\">Email ID<span style=\\\"font-size: 10px\\\">(please enter here only official id)</span></ion-label>\\r\\n                                            <ion-input formControlName=\\\"email\\\" [(ngModel)]=\\\"data.email\\\" autocomplete=\\\"nope\\\"></ion-input>\\r\\n\\r\\n                                            <ion-text *ngIf=\\\"submitted && f1.email.errors\\\" class=\\\"cs-error\\\">\\r\\n    \\r\\n                                                    <span *ngIf=\\\"!f1.email.errors.required\\\">Email Invalid</span>\\r\\n                    \\r\\n                                            </ion-text>\\r\\n\\r\\n                                        </ion-item> \\r\\n                                       <ion-item [ngClass]=\\\"submitted && f1.companyName.errors && f1.companyName.errors.required ? 'has-error' : (f1.companyName.errors && !f1.companyName.errors.required ? 'has-text' : '')\\\">\\r\\n                                            <ion-label position=\\\"floating\\\">Company Name</ion-label>\\r\\n                                            <ion-input formControlName=\\\"companyName\\\" [(ngModel)]=\\\"data.companyName\\\" autocomplete=\\\"nope\\\"></ion-input>\\r\\n\\r\\n                                            <ion-text *ngIf=\\\"submitted && f1.companyName.errors\\\" class=\\\"cs-error\\\">\\r\\n    \\r\\n                                                <span *ngIf=\\\"f1.companyName.errors.minlength\\\">Minimum 5 Letter Required</span>\\r\\n                \\r\\n                                            </ion-text>                                \\r\\n\\r\\n                                        </ion-item> \\r\\n\\r\\n                                        <ion-item [ngClass]=\\\"submitted && f1.username.errors && f1.username.errors.required ? 'has-error' : (f1.username.errors && !f1.username.errors.required ? 'has-text' : '')\\\">\\r\\n                                            <ion-label position=\\\"floating\\\">Username</ion-label>\\r\\n                                            <ion-input type=\\\"text\\\" formControlName=\\\"username\\\" [(ngModel)]=\\\"data.username\\\" autocomplete=\\\"nope\\\"></ion-input>\\r\\n                                        </ion-item>\\r\\n\\r\\n                                        <ion-item [ngClass]=\\\"submitted && f1.password.errors && f1.password.errors.required ? 'has-error' : (f1.password.errors && !f1.password.errors.required ? 'has-text' : '')\\\">\\r\\n                                            <ion-label position=\\\"floating\\\">Password</ion-label>\\r\\n                                            <ion-input type=\\\"password\\\" formControlName=\\\"password\\\" [(ngModel)]=\\\"data.password\\\" autocomplete=\\\"nope\\\"></ion-input>\\r\\n                                        </ion-item>\\r\\n                                        <ion-item [ngClass]=\\\"submitted && f1.superiorName.errors && f1.superiorName.errors.required ? 'has-error' : (f1.superiorName.errors && !f1.superiorName.errors.required ? 'has-text' : '')\\\">\\r\\n                                            <ion-label position=\\\"floating\\\">Superior Name</ion-label>\\r\\n                                            <ion-input formControlName=\\\"superiorName\\\" [(ngModel)]=\\\"data.superiorName\\\" autocomplete=\\\"nope\\\"></ion-input>\\r\\n\\r\\n                                            <ion-text *ngIf=\\\"submitted && f1.superiorName.errors\\\" class=\\\"cs-error\\\">\\r\\n    \\r\\n                                                <span *ngIf=\\\"f1.superiorName.errors.minlength\\\">Minimum 5 Letter Required</span>\\r\\n                \\r\\n                                            </ion-text>                                \\r\\n\\r\\n                                        </ion-item> \\r\\n                                         <ion-item [ngClass]=\\\"submitted && f1.superioremail.errors && f1.superioremail.errors.required ? 'has-error' : (f1.superioremail.errors && !f1.superioremail.errors.required ? 'has-text' : '')\\\">\\r\\n                                            <ion-label position=\\\"floating\\\"> Superior Email ID</ion-label>\\r\\n                                            <ion-input formControlName=\\\"superioremail\\\" [(ngModel)]=\\\"data.superioremail\\\" autocomplete=\\\"nope\\\"></ion-input>\\r\\n\\r\\n                                            <ion-text *ngIf=\\\"submitted && f1.superioremail.errors\\\" class=\\\"cs-error\\\">\\r\\n    \\r\\n                                                    <span *ngIf=\\\"!f1.superioremail.errors.required\\\">Email Invalid</span>\\r\\n                    \\r\\n                                            </ion-text>\\r\\n\\r\\n                                        </ion-item> \\r\\n                                        <div class=\\\"heading\\\">\\r\\n                                            <h2>Project Info</h2>\\r\\n                                        </div>\\r\\n                                        <ion-item [ngClass]=\\\"submitted && f1.so_no.errors && f1.so_no.errors.required ? 'has-error' : (f1.so_no.errors && !f1.so_no.errors.required ? 'has-text' : '')\\\" >\\r\\n                                            <ion-label position=\\\"floating\\\">Sales Order No.(SO No.)</ion-label>\\r\\n                                            <ion-input formControlName=\\\"so_no\\\" [(ngModel)]=\\\"data.so_no\\\" (keyup) = \\\"onSonoHandler()\\\" autocomplete=\\\"nope\\\"></ion-input>\\r\\n                                            <ion-text *ngIf=\\\"submitted && f1.so_no.errors\\\" class=\\\"cs-error\\\">\\r\\n    \\r\\n                                                <span *ngIf=\\\"!f1.so_no.errors.required\\\">SO NO Invalid</span>\\r\\n                \\r\\n                                        </ion-text>\\r\\n                                                                      \\r\\n\\r\\n                                        </ion-item>  <ion-item  [ngClass]=\\\"submitted && f1.fg_no.errors && f1.fg_no.errors.required ? 'has-error' : (f1.fg_no.errors && !f1.fg_no.errors.required ? 'has-text' : '')\\\">\\r\\n                                            <ion-label position=\\\"floating\\\">Fg no.</ion-label>\\r\\n                                            <ion-input formControlName=\\\"fg_no\\\" [(ngModel)]=\\\"data.fg_no\\\" (keyup) = \\\"onfgHandler()\\\" autocomplete=\\\"nope\\\"></ion-input>\\r\\n                                            <ion-text *ngIf=\\\"submitted && f1.fg_no.errors\\\" class=\\\"cs-error\\\">\\r\\n    \\r\\n                                                <span *ngIf=\\\"!f1.fg_no.errors.fg_no\\\">Fg NO Invalid</span>\\r\\n                \\r\\n                                        </ion-text>\\r\\n                                                                          \\r\\n\\r\\n                                        </ion-item> \\r\\n                                        <div class=\\\"head1\\\">\\r\\n                                            <div class=\\\"head\\\">\\r\\n                                              \\r\\n                                                <ion-button fill=\\\"clear\\\" style=\\\"font-size: 8px\\\" (click)=\\\"imageModel()\\\"> *AVAILABLE ON PANEL NAME PLATE & DRAWING</ion-button>\\r\\n                                            </div>\\r\\n                                        </div>\\r\\n                                        <div class=\\\"cs-btn mt16 lr\\\">\\r\\n                                            <ion-button (click)=\\\"onSaveRegistrationHandler()\\\" class=\\\"success min w100\\\">SAVE</ion-button>\\r\\n                                        </div>\\r\\n                                        <!-- <div class=\\\"heading\\\">\\r\\n                                            <h2>Project Info</h2>\\r\\n                                        </div>\\r\\n\\r\\n                                        <ion-item [ngClass]=\\\"submitted && f1.projectName.errors && f1.projectName.errors.required ? 'has-error' : (f1.projectName.errors && !f1.projectName.errors.required ? 'has-text' : '')\\\">\\r\\n                                            <ion-label position=\\\"floating\\\">Project Name</ion-label>\\r\\n                                            <ion-input formControlName=\\\"projectName\\\" [(ngModel)]=\\\"data.projectName\\\" autocomplete=\\\"nope\\\"></ion-input>\\r\\n\\r\\n                                            <ion-text *ngIf=\\\"submitted && f1.projectName.errors\\\" class=\\\"cs-error\\\">\\r\\n    \\r\\n                                                <span *ngIf=\\\"f1.projectName.errors.minlength\\\">Minimum 5 Letter Required</span>\\r\\n                \\r\\n                                            </ion-text>\\r\\n\\r\\n                                        </ion-item> -->\\r\\n\\r\\n\\r\\n                                    </div>\\r\\n\\r\\n                                </form>\\r\\n                              \\r\\n                            </div>\\r\\n\\r\\n                            <!-- <div class=\\\"heading\\\">\\r\\n                                <h2>Address Info</h2>\\r\\n                            </div>\\r\\n                            <div  class=\\\"address mb16\\\">\\r\\n                             <form [formGroup]=\\\"registerForm2\\\" (ngSubmit)=\\\"onNextStageHandler(2)\\\">\\r\\n\\r\\n                                <div class=\\\"common_form inner_page\\\">\\r\\n                                    <ion-item [ngClass]=\\\"submitted && f2.street.errors && f2.street.errors.required ? 'has-error' : (f2.street.errors && !f2.street.errors.required ? 'has-text' : '')\\\" class=\\\"h70\\\">\\r\\n                                        <ion-textarea formControlName=\\\"street\\\" [(ngModel)]=\\\"data.street\\\" placeholder=\\\"Address\\\"></ion-textarea>\\r\\n                                      \\r\\n                                        <ion-text *ngIf=\\\"submitted && f2.street.errors\\\" class=\\\"cs-error\\\">\\r\\n                                                <span *ngIf=\\\"f2.street.errors.minlength\\\">Minimum 5 Letter Required</span>\\r\\n                                        </ion-text>\\r\\n                                    </ion-item>\\r\\n\\r\\n                                    \\r\\n                                    <ion-item [ngClass]=\\\"submitted && f2.state.errors && f2.state.errors.required ? 'has-error' : (f2.state.errors && !f2.state.errors.required ? 'has-text' : '')\\\" class=\\\"cs-select\\\">\\r\\n\\r\\n                                        <ion-label>State</ion-label>\\r\\n\\r\\n                                        <ionic-selectable\\r\\n                                        [(ngModel)]=\\\"data.state\\\"\\r\\n                                        [items]=\\\"stateList\\\"\\r\\n                                        itemValueField=\\\"state_name\\\"\\r\\n                                        itemTextField=\\\"state_name\\\"\\r\\n                                        formControlName=\\\"state\\\"\\r\\n                                        [canSearch]=\\\"true\\\"\\r\\n                                        (onChange)=\\\"onGetDistrictListHandler($event)\\\">\\r\\n\\r\\n                                        </ionic-selectable>\\r\\n\\r\\n                                    </ion-item>\\r\\n\\r\\n                                    \\r\\n                                    <ion-item [ngClass]=\\\"submitted && f2.district.errors && f2.district.errors.required ? 'has-error' : (f2.district.errors && !f2.district.errors.required ? 'has-text' : '')\\\" class=\\\"cs-select\\\">\\r\\n                                        <ion-label>District</ion-label>\\r\\n\\r\\n                                        <ionic-selectable\\r\\n                                        [(ngModel)]=\\\"data.district\\\"\\r\\n                                        [items]=\\\"districtList\\\"\\r\\n                                        itemValueField=\\\"district_name\\\"\\r\\n                                        itemTextField=\\\"district_name\\\"\\r\\n                                        formControlName=\\\"district\\\"\\r\\n                                        [canSearch]=\\\"true\\\">\\r\\n\\r\\n                                        </ionic-selectable>\\r\\n                                    </ion-item>\\r\\n                                    \\r\\n                                    <ion-item [ngClass]=\\\"submitted && f2.city.errors && f2.city.errors.required ? 'has-error' : (f2.city.errors && !f2.city.errors.required ? 'has-text' : '')\\\">\\r\\n                                        <ion-label position=\\\"floating\\\">City</ion-label>\\r\\n                                        <ion-input formControlName=\\\"city\\\" [(ngModel)]=\\\"data.city\\\" ></ion-input>\\r\\n\\r\\n                                        <ion-text *ngIf=\\\"submitted && f2.city.errors\\\" class=\\\"cs-error\\\">\\r\\n    \\r\\n                                                <span *ngIf=\\\"f2.city.errors.minlength\\\">Minimum 4 Letter Required</span>\\r\\n                \\r\\n                                        </ion-text>\\r\\n\\r\\n                                    </ion-item>\\r\\n\\r\\n\\r\\n                                    <ion-item [ngClass]=\\\"submitted && f2.pincode.errors && f2.pincode.errors.required ? 'has-error' : (f2.pincode.errors && !f2.pincode.errors.required ? 'has-text' : '')\\\">\\r\\n                                        <ion-label position=\\\"floating\\\">Pin Code</ion-label>\\r\\n                                        <ion-input type=\\\"tel\\\" formControlName=\\\"pincode\\\" [(ngModel)]=\\\"data.pincode\\\"  minlength =\\\"6 \\\"maxlength=\\\"6\\\" (keypress)=\\\"dbService.numberOnly($event)\\\"></ion-input>\\r\\n\\r\\n                                        <ion-text *ngIf=\\\"submitted && f2.pincode.errors\\\" class=\\\"cs-error\\\">\\r\\n    \\r\\n                                                <span *ngIf=\\\"f2.pincode.errors.minlength || f2.pincode.errors.maxlength\\\">Pincode Must Be 6 Digit!</span>\\r\\n                \\r\\n                                        </ion-text>\\r\\n\\r\\n                                    </ion-item>\\r\\n\\r\\n\\r\\n                                </div>\\r\\n                              </form>\\r\\n\\r\\n                            </div>\\r\\n                        \\r\\n                            <div class=\\\"heading\\\">\\r\\n                                <h2>Site Contact Person Detail</h2>\\r\\n                            </div>\\r\\n                            <div class=\\\"contact_person\\\">\\r\\n                            <form [formGroup]=\\\"registerForm3\\\" (ngSubmit)=\\\"onNextStageHandler(3)\\\">\\r\\n                        \\r\\n                                <div class=\\\"common_form inner_page\\\">\\r\\n\\r\\n                                    <ion-item [ngClass]=\\\"submitted && f3.contactName.errors && f3.contactName.errors.required ? 'has-error' : (f3.contactName.errors && !f3.contactName.errors.required ? 'has-text' : '')\\\">\\r\\n                                        <ion-label position=\\\"floating\\\">Name</ion-label>\\r\\n                                        <ion-input formControlName=\\\"contactName\\\" [(ngModel)]=\\\"data.contactName\\\" autocomplete=\\\"nope\\\"></ion-input>\\r\\n\\r\\n                                        <ion-text *ngIf=\\\"submitted && f3.contactName.errors\\\" class=\\\"cs-error\\\">\\r\\n    \\r\\n                                                <span *ngIf=\\\"f3.contactName.errors.minlength\\\">Minimum 3 Letter Required</span>\\r\\n    \\r\\n                                                <span *ngIf=\\\"f3.contactName.errors.maxlength\\\">Maximum 50 Letter Allowed</span>\\r\\n                \\r\\n                                        </ion-text>\\r\\n\\r\\n                                    </ion-item>\\r\\n\\r\\n\\r\\n                                    <ion-item [ngClass]=\\\"submitted && f3.designation.errors && f3.designation.errors.required ? 'has-error' : (f3.designation.errors && !f3.designation.errors.required ? 'has-text' : '')\\\">\\r\\n                                        <ion-label position=\\\"floating\\\">Designation</ion-label>\\r\\n                                        <ion-input formControlName=\\\"designation\\\" [(ngModel)]=\\\"data.designation\\\" autocomplete=\\\"nope\\\"></ion-input>\\r\\n                                            <ion-text *ngIf=\\\"submitted && f3.designation.errors\\\" class=\\\"cs-error\\\">\\r\\n        \\r\\n                                                    <span *ngIf=\\\"f3.designation.errors.minlength\\\">Minimum 3 Letter Required</span>\\r\\n        \\r\\n                                                    <span *ngIf=\\\"f3.designation.errors.maxlength\\\">Maximum 50 Letter Allowed</span>\\r\\n                    \\r\\n                                            </ion-text>\\r\\n                                    </ion-item>\\r\\n\\r\\n\\r\\n                                    <ion-item [ngClass]=\\\"submitted && f3.contactEmail.errors && f3.contactEmail.errors.required ? 'has-error' : (f3.contactEmail.errors && !f3.contactEmail.errors.required ? 'has-text' : '')\\\">\\r\\n                                        <ion-label position=\\\"floating\\\">Email ID</ion-label>\\r\\n                                        <ion-input formControlName=\\\"contactEmail\\\" [(ngModel)]=\\\"data.contactEmail\\\" autocomplete=\\\"nope\\\"></ion-input>\\r\\n                                        <ion-text *ngIf=\\\"submitted && f3.contactEmail.errors\\\" class=\\\"cs-error\\\">\\r\\n    \\r\\n                                                <span *ngIf=\\\"!f3.contactEmail.errors.required\\\">Email Invalid!</span>\\r\\n                \\r\\n                                        </ion-text>\\r\\n                                    </ion-item>\\r\\n\\r\\n\\r\\n                                    <ion-item [ngClass]=\\\"submitted && f3.contactMobile.errors && f3.contactMobile.errors.required ? 'has-error' : (f3.contactMobile.errors && !f3.contactMobile.errors.required ? 'has-text' : '')\\\">\\r\\n                                        <ion-label position=\\\"floating\\\">Mobile No.</ion-label>\\r\\n                                        <ion-input type=\\\"tel\\\" formControlName=\\\"contactMobile\\\" [(ngModel)]=\\\"data.contactMobile\\\" minlength = 10 maxlength=\\\"10\\\" (keypress)=\\\"dbService.numberOnly($event)\\\" autocomplete=\\\"nope\\\"></ion-input>\\r\\n                                  \\r\\n                                        <ion-text *ngIf=\\\"submitted && f3.contactMobile.errors\\\" class=\\\"cs-error\\\">\\r\\n    \\r\\n                                                <span *ngIf=\\\"f3.contactMobile.errors.minlength\\\">Mobile must be 10 digit!</span>\\r\\n    \\r\\n                                                <span *ngIf=\\\"f3.contactMobile.errors.maxlength\\\">Mobile Must be 10 Digit</span>\\r\\n                \\r\\n                                        </ion-text>\\r\\n                                    </ion-item>\\r\\n\\r\\n\\r\\n                                </div>\\r\\n                            </form>\\r\\n                            \\r\\n                                <div class=\\\"cs-btn mt16 lr\\\">\\r\\n                                    <ion-button (click)=\\\"onSaveRegistrationHandler()\\\" class=\\\"success min w100\\\">SAVE</ion-button>\\r\\n                                </div>\\r\\n                                \\r\\n                            </div> -->\\r\\n                            \\r\\n                        </div>\\r\\n                    </div>\\r\\n                    \\r\\n                </div>\\r\\n                \\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n    </div>\\r\\n</ion-content>\\r\\n\"","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { RegistrationPage } from './registration.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: RegistrationPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class RegistrationPageRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { RegistrationPageRoutingModule } from './registration-routing.module';\r\n\r\nimport { RegistrationPage } from './registration.page';\r\nimport { IonicSelectableModule } from 'ionic-selectable';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    IonicModule,\r\n    IonicSelectableModule,\r\n    RegistrationPageRoutingModule\r\n  ],\r\n  declarations: [RegistrationPage]\r\n})\r\nexport class RegistrationPageModule {}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2N1c3RvbWVyX2FwcC9yZWdpc3RyYXRpb24vcmVnaXN0cmF0aW9uLnBhZ2Uuc2NzcyJ9 */\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { PopoverController } from '@ionic/angular';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { LoadingController, AlertController, ModalController } from '@ionic/angular';\r\nimport { DbServiceService } from 'src/app/db-service.service';\r\n\r\nimport * as moment from 'moment';\r\nimport { THIS_EXPR } from '@angular/compiler/src/output/output_ast';\r\nimport { ImagemodalPage } from 'src/app/imagemodal/imagemodal.page';\r\n\r\n@Component({\r\n  selector: 'app-registration',\r\n  templateUrl: './registration.page.html',\r\n  styleUrls: ['./registration.page.scss'],\r\n})\r\nexport class RegistrationPage implements OnInit {\r\n  \r\n  \r\n  activeStage: any = 1;\r\n  fgList2: any;\r\n  \r\n  fgList: any = [];\r\n  soList: any = [];\r\n  soList2: any = [];\r\n  \r\n  districtList: any = [];\r\n  \r\n  contactData: any = [];\r\n  \r\n  data: any = {};\r\n  \r\n  submitted: any = false;\r\n  minDate: any  = '';\r\n  \r\n  currentActiveCheckTab: any = 0;\r\n  \r\n  registerForm1: FormGroup;\r\n  registerForm2: FormGroup;\r\n  registerForm3: FormGroup;\r\n  \r\n  constructor(private route: Router,\r\n    public routeParams: ActivatedRoute,\r\n    private formBuilder: FormBuilder,\r\n    public alertCtrl: AlertController,\r\n    public modalController: ModalController,\r\n    public dbService: DbServiceService) {\r\n      \r\n      this.registerForm1 = this.formBuilder.group({\r\n        \r\n        name: ['', [Validators.required, Validators.minLength(5)]],\r\n        designation: ['', [Validators.required, Validators.minLength(5)]],\r\n        superiorName: ['', [Validators.required, Validators.minLength(5)]],\r\n        email: ['', [Validators.required,Validators.email]],\r\n        companyName: ['', [Validators.required, Validators.minLength(5)]],\r\n        so_no: ['', [Validators.required]],\r\n        \r\n        fg_no: ['', [ Validators.pattern(this.soList)]],\r\n        projectName: ['', [Validators.required, Validators.minLength(5)]],\r\n        superioremail: ['', [Validators.required,Validators.email]],\r\n        username: ['', [Validators.required, Validators.minLength(5)]],                \r\n        password: ['', [Validators.required, Validators.minLength(5)]],\r\n        landlineNo: ['', [Validators.required, Validators.minLength(10), Validators.maxLength(10)]],\r\n      });\r\n      \r\n      this.registerForm2 = this.formBuilder.group({\r\n        \r\n        street: ['', [Validators.minLength(5)]],\r\n        state: ['', [Validators.required]],\r\n        district: ['', [Validators.required]],\r\n        city: ['', [Validators.required, Validators.minLength(4)]],\r\n        pincode: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(6)]]\r\n      });\r\n      \r\n      \r\n      this.registerForm3 = this.formBuilder.group({\r\n        \r\n        contactName: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(50)]],\r\n        designation: ['', [ Validators.minLength(3), Validators.maxLength(50)]],\r\n        contactEmail: ['', [Validators.required, Validators.email]],\r\n        contactMobile: ['', [Validators.required, Validators.minLength(10), Validators.maxLength(10)]],\r\n      });\r\n    }\r\n    \r\n    ngOnInit() {\r\n      \r\n      this.onGetStateListHandler();\r\n    }\r\n    \r\n    async onSaveRegistrationHandler() {\r\n      \r\n      console.log(this.data);\r\n      \r\n      this.submitted = true;\r\n      \r\n \r\n\r\n  if (this.registerForm1.invalid ) {\r\n\r\n      return;\r\n  }\r\n      \r\n      \r\n      \r\n      \r\n      if( (!this.data.so_no && !this.data.fg_no )) {\r\n        \r\n        this.dbService.onShowAlertMessage('Error', 'Enter SO NO or FGNO !');\r\n        return;\r\n      }\r\n      \r\n      \r\n      \r\n      else {\r\n        \r\n        console.log('hello');\r\n        \r\n        \r\n        \r\n        \r\n        console.log(this.data);\r\n        \r\n        const alert = await this.alertCtrl.create({\r\n          header: 'Confirm',\r\n          message: 'Are You Sure, You Want To Register ?',\r\n          buttons: [\r\n            {\r\n              text: 'No',\r\n              role: 'cancel',\r\n              handler: () => {\r\n                console.log('No clicked');\r\n              }\r\n            },\r\n            {\r\n              text: 'Yes',\r\n              handler: () => {\r\n                \r\n                console.log('Yes clicked');\r\n                \r\n                const inputData = JSON.parse(JSON.stringify(this.data));\r\n                \r\n                \r\n                this.dbService.presentLoader();\r\n                \r\n                this.dbService.onPostRequestHandler(inputData, 'login/onRegisterCustomerAccount').subscribe((result) => {\r\n                  \r\n                  console.log(result);\r\n                  \r\n                  this.dbService.dismissLoader();\r\n                  \r\n                  if (result[`status`] == 'error') {\r\n                    \r\n                    this.dbService.onShowAlertMessage('Error', result[`statusMessage`]);\r\n                    \r\n                  } else {\r\n                    \r\n                    const loginData = {\r\n                      loginType: result[`loginData`][`loginType`],\r\n                      loginId: result[`loginData`][`loginId`],\r\n                      loginName: result[`loginData`][`loginName`],\r\n                      loginStatus: result[`loginData`][`loginStatus`]\r\n                    };\r\n                    \r\n                    \r\n                    localStorage.setItem('loginData', JSON.stringify(loginData));\r\n                    \r\n                    console.log(JSON.parse(localStorage.getItem('loginData')));\r\n                    \r\n                    this.dbService.onShowAlertMessage('Success', 'Login Request sent, wait till Verification complete.');\r\n                    \r\n                    this.route.navigate(['/customerlogin']);\r\n                    \r\n                  }\r\n                });\r\n              }\r\n            }\r\n          ]\r\n        });\r\n        \r\n        await alert.present();\r\n        \r\n      }\r\n    }\r\n    soerror:any=[];\r\n    fgerror:any=[];\r\n\r\n    async onSonoHandler(){\r\n      const inputData = {\r\n        so_no: this.data.so_no,\r\n        \r\n      };\r\n      this.dbService.onPostRequestHandler(inputData, 'login/checkSono').subscribe((result) => {\r\n        \r\n        console.log(result);\r\n        this.fgList = result[`fg`];\r\n        console.log(this.fgList);\r\n        this.fgerror = result[`msg`]\r\n      \r\n        \r\n      });\r\n    }\r\n    \r\n    async imageModel() {\r\n      const modal = await this.modalController.create({\r\n        component: ImagemodalPage,\r\n        componentProps: { }\r\n      });\r\n      // this.onGetProjectDetail();\r\n      return await modal.present();\r\n    }\r\n    \r\n    \r\n    async onfgHandler(){\r\n      const inputData = {\r\n        so_no: this.data.so_no,\r\n        fg_no:this.data.fg_no\r\n      };\r\n      this.dbService.onPostRequestHandler(inputData, 'login/checkFgno').subscribe((result) => {\r\n        \r\n        console.log(result);\r\n        this.soList = result[`fg`];\r\n        console.log( this.soList);\r\n        \r\n        this.data.so_no=this.soList.so_no\r\n        console.log(this.data.so_no);\r\n        this.soerror = result[`msg`]\r\n       \r\n      });\r\n    }\r\n    async onGetStateListHandler() {\r\n      \r\n      const inputData = {};\r\n      \r\n      this.dbService.onPostRequestHandler(inputData, 'task/getStateList').subscribe((result) => {\r\n        \r\n        console.log(result);\r\n        // this.stateList = result[`stateList`];\r\n        \r\n      });\r\n    }\r\n    \r\n    async onGetDistrictListHandler() {\r\n      \r\n      this.data.district =  '';\r\n      this.districtList = [];\r\n      \r\n      const inputData = {\r\n        stateName: this.data.state[`state_name`]\r\n      };\r\n      \r\n      this.dbService.presentLoader();\r\n      \r\n      this.dbService.onPostRequestHandler(inputData, 'task/getDistrictList').subscribe((result) => {\r\n        \r\n        console.log(result);\r\n        this.dbService.dismissLoader();\r\n        this.districtList = result[`districtList`];\r\n        \r\n      });\r\n    }\r\n    \r\n    \r\n    \r\n    async onNextStageHandler(stage) {\r\n      \r\n      this.submitted = true;\r\n      console.log(this.registerForm2);\r\n      \r\n      if (this['registerForm' + stage + ''].invalid) {\r\n        \r\n        if (stage == 1) {\r\n          this['registerForm' + stage + ''].get('name').markAsTouched();\r\n          this['registerForm' + stage + ''].get('designation').markAsTouched();\r\n          \r\n          this['registerForm' + stage + ''].get('companyName').markAsTouched();\r\n          this['registerForm' + stage + ''].get('email').markAsTouched();\r\n          // this['registerForm' + stage + ''].get('mobile').markAsTouched();\r\n          this['registerForm' + stage + ''].get('landlineNo').markAsTouched();\r\n          this['registerForm' + stage + ''].get('superiorName').markAsTouched();\r\n          this['registerForm' + stage + ''].get('superioremail').markAsTouched();\r\n          this['registerForm' + stage + ''].get('so_no').markAsTouched();\r\n          this['registerForm' + stage + ''].get('fg_no').markAsTouched();\r\n          \r\n          \r\n        } else if (stage == 2) {\r\n          \r\n          this['registerForm' + stage + ''].get('street').markAsTouched();\r\n          this['registerForm' + stage + ''].get('state').markAsTouched();\r\n          this['registerForm' + stage + ''].get('district').markAsTouched();\r\n          this['registerForm' + stage + ''].get('city').markAsTouched();\r\n          this['registerForm' + stage + ''].get('pincode').markAsTouched();\r\n          \r\n          \r\n        } else if (stage == 3) {\r\n          \r\n          this['registerForm' + stage + ''].get('contactName').markAsTouched();\r\n          this['registerForm' + stage + ''].get('designation').markAsTouched();\r\n          this['registerForm' + stage + ''].get('contactEmail').markAsTouched();\r\n          this['registerForm' + stage + ''].get('contactMobile').markAsTouched();\r\n        }\r\n        \r\n        return;\r\n        \r\n      } else {\r\n        \r\n        console.log(this.data);\r\n        \r\n        \r\n        // if (this.activeStage == 3) {\r\n        \r\n        if (!this.data.contactName || !this.data.designation || !this.data.contactEmail || !this.data.contactMobile) {\r\n          \r\n          this.dbService.onShowAlertMessage('Error', 'Fill contact complete Detail!');\r\n          return false;\r\n        }\r\n        \r\n        this.contactData.push({\r\n          \r\n          contactName: this.data.contactName,\r\n          designation: this.data.designation,\r\n          contactEmail: this.data.contactEmail,\r\n          contactMobile: this.data.contactMobile\r\n        });\r\n        \r\n        this.data.contactName = '';\r\n        this.data.contactMobile = '';\r\n        this.data.designation = '';\r\n        this.data.contactEmail = '';\r\n        \r\n        this.submitted = false;\r\n        \r\n        // } else {\r\n        \r\n        //    this.activeStage += 1;\r\n        //    this.submitted = false;\r\n        // }\r\n      }\r\n    }\r\n    \r\n    async onDeleteContactHandler(index) {\r\n      \r\n      const alert = await this.alertCtrl.create({\r\n        header: 'Confirm',\r\n        message: 'Are You Sure, You Want To Delete Contact ?',\r\n        buttons: [\r\n          {\r\n            text: 'No',\r\n            role: 'cancel',\r\n            handler: () => {\r\n              console.log('No clicked');\r\n            }\r\n          },\r\n          {\r\n            text: 'Yes',\r\n            handler: () => {\r\n              \r\n              console.log('Yes clicked');\r\n              \r\n              this.contactData.splice(index, 1);\r\n              this.dbService.presentToast('Contact Deleted Successfully!');\r\n            }\r\n          }\r\n        ]\r\n      });\r\n      \r\n      await alert.present();\r\n      \r\n    }\r\n    \r\n    \r\n    async onBackClickHandler(stage)  {\r\n      this.activeStage = stage - 1;\r\n    }\r\n    \r\n    get f1() { return this.registerForm1.controls; }\r\n    get f2() { return this.registerForm2.controls; }\r\n    get f3() { return this.registerForm3.controls; }\r\n    \r\n  }\r\n  "],"sourceRoot":"webpack:///"}