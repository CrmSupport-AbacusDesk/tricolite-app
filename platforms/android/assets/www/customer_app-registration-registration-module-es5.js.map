{"version":3,"sources":["./src/app/customer_app/registration/registration.page.html","./src/app/customer_app/registration/registration-routing.module.ts","./src/app/customer_app/registration/registration.module.ts","./src/app/customer_app/registration/registration.page.scss","./src/app/customer_app/registration/registration.page.ts"],"names":[],"mappings":"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","file":"customer_app-registration-registration-module-es5.js","sourcesContent":["module.exports = \"<ion-content>\\r\\n    <div class=\\\"login-container\\\">\\r\\n        <div class=\\\"logo\\\"><img src=\\\"../../assets/img/logo.jpg\\\" alt=\\\"\\\"></div>\\r\\n        \\r\\n        <div class=\\\"form-container\\\">\\r\\n            <div class=\\\"head\\\">\\r\\n                <div class=\\\"heading\\\">\\r\\n                    <h1>Sign Up</h1>\\r\\n                    <ion-button fill=\\\"clear\\\" routerLink=\\\"/customerlogin\\\"><i class=\\\"material-icons\\\">arrow_right_alt</i> Back To Login</ion-button>\\r\\n                </div>\\r\\n            </div>\\r\\n            \\r\\n            <div class=\\\"input-container mt10\\\">\\r\\n                <div class=\\\"custome-filter dlform\\\">\\r\\n                    <div class=\\\"fiter-data\\\">\\r\\n                        <div class=\\\"cs-right\\\">\\r\\n                            <div class=\\\"heading\\\">\\r\\n                                <h2>Basic Info</h2>\\r\\n                            </div>\\r\\n                            <div  class=\\\"basic_info mb16\\\">\\r\\n                                <form [formGroup]=\\\"registerForm1\\\" (ngSubmit)=\\\"onNextStageHandler(1)\\\">\\r\\n                                    <div class=\\\"common_form inner_page\\\">\\r\\n                                        <ion-item [ngClass]=\\\"submitted && f1.companyName.errors && f1.companyName.errors.required ? 'has-error' : (f1.companyName.errors && !f1.companyName.errors.required ? 'has-text' : '')\\\">\\r\\n                                            <ion-label position=\\\"floating\\\">Company Name</ion-label>\\r\\n                                            <ion-input formControlName=\\\"companyName\\\" [(ngModel)]=\\\"data.companyName\\\" autocomplete=\\\"off\\\"></ion-input>\\r\\n\\r\\n                                            <ion-text *ngIf=\\\"submitted && f1.companyName.errors\\\" class=\\\"cs-error\\\">\\r\\n    \\r\\n                                                <span *ngIf=\\\"f1.companyName.errors.minlength\\\">Minimum 5 Letter Required</span>\\r\\n                \\r\\n                                            </ion-text>                                \\r\\n\\r\\n                                        </ion-item>\\r\\n\\r\\n\\r\\n                                        <ion-item [ngClass]=\\\"submitted && f1.email.errors && f1.email.errors.required ? 'has-error' : (f1.email.errors && !f1.email.errors.required ? 'has-text' : '')\\\">\\r\\n                                            <ion-label position=\\\"floating\\\">Email ID</ion-label>\\r\\n                                            <ion-input formControlName=\\\"email\\\" [(ngModel)]=\\\"data.email\\\" autocomplete=\\\"off\\\"></ion-input>\\r\\n\\r\\n                                            <ion-text *ngIf=\\\"submitted && f1.email.errors\\\" class=\\\"cs-error\\\">\\r\\n    \\r\\n                                                    <span *ngIf=\\\"!f1.email.errors.required\\\">Email Invalid</span>\\r\\n                    \\r\\n                                            </ion-text>\\r\\n\\r\\n                                        </ion-item>\\r\\n\\r\\n                                        <ion-item [ngClass]=\\\"submitted && f1.landlineNo.errors && f1.landlineNo.errors.required ? 'has-error' : (f1.landlineNo.errors && !f1.landlineNo.errors.required ? 'has-text' : '')\\\">\\r\\n                                            <ion-label position=\\\"floating\\\">Landline No.</ion-label>\\r\\n                                            <ion-input type=\\\"tel\\\" formControlName=\\\"landlineNo\\\" [(ngModel)]=\\\"data.landlineNo\\\"   minlength = \\\"6\\\" maxlength=\\\"13\\\" (keypress)=\\\"dbService.numberOnly($event)\\\" autocomplete=\\\"off\\\"></ion-input>\\r\\n\\r\\n                                            <ion-text *ngIf=\\\"submitted && f1.landlineNo.errors\\\" class=\\\"cs-error\\\">\\r\\n    \\r\\n                                                <span *ngIf=\\\"f1.landlineNo.errors.minlength\\\">Minimum 5 Digit Required</span>\\r\\n    \\r\\n                                                <span *ngIf=\\\"f1.landlineNo.errors.maxlength\\\">Maximum 30 Digit Required</span>\\r\\n                    \\r\\n                                            </ion-text>\\r\\n\\r\\n                                        </ion-item>\\r\\n\\r\\n\\r\\n                                        <ion-item [ngClass]=\\\"submitted && f1.username.errors && f1.username.errors.required ? 'has-error' : (f1.username.errors && !f1.username.errors.required ? 'has-text' : '')\\\">\\r\\n                                            <ion-label position=\\\"floating\\\">Username</ion-label>\\r\\n                                            <ion-input type=\\\"text\\\" formControlName=\\\"username\\\" [(ngModel)]=\\\"data.username\\\" autocomplete=\\\"off\\\"></ion-input>\\r\\n                                        </ion-item>\\r\\n\\r\\n                                        <ion-item [ngClass]=\\\"submitted && f1.password.errors && f1.password.errors.required ? 'has-error' : (f1.password.errors && !f1.password.errors.required ? 'has-text' : '')\\\">\\r\\n                                            <ion-label position=\\\"floating\\\">Password</ion-label>\\r\\n                                            <ion-input type=\\\"password\\\" formControlName=\\\"password\\\" [(ngModel)]=\\\"data.password\\\" autocomplete=\\\"off\\\"></ion-input>\\r\\n                                        </ion-item>\\r\\n\\r\\n                                        <div class=\\\"heading\\\">\\r\\n                                            <h2>Project Info</h2>\\r\\n                                        </div>\\r\\n\\r\\n                                        <ion-item [ngClass]=\\\"submitted && f1.projectName.errors && f1.projectName.errors.required ? 'has-error' : (f1.projectName.errors && !f1.projectName.errors.required ? 'has-text' : '')\\\">\\r\\n                                            <ion-label position=\\\"floating\\\">Project Name</ion-label>\\r\\n                                            <ion-input formControlName=\\\"projectName\\\" [(ngModel)]=\\\"data.projectName\\\" autocomplete=\\\"off\\\"></ion-input>\\r\\n\\r\\n                                            <ion-text *ngIf=\\\"submitted && f1.projectName.errors\\\" class=\\\"cs-error\\\">\\r\\n    \\r\\n                                                <span *ngIf=\\\"f1.projectName.errors.minlength\\\">Minimum 5 Letter Required</span>\\r\\n                \\r\\n                                            </ion-text>\\r\\n\\r\\n                                        </ion-item>\\r\\n\\r\\n\\r\\n                                    </div>\\r\\n\\r\\n                                </form>\\r\\n\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"heading\\\">\\r\\n                                <h2>Address Info</h2>\\r\\n                            </div>\\r\\n                            <div  class=\\\"address mb16\\\">\\r\\n                             <form [formGroup]=\\\"registerForm2\\\" (ngSubmit)=\\\"onNextStageHandler(2)\\\">\\r\\n\\r\\n                                <div class=\\\"common_form inner_page\\\">\\r\\n                                    <ion-item [ngClass]=\\\"submitted && f2.street.errors && f2.street.errors.required ? 'has-error' : (f2.street.errors && !f2.street.errors.required ? 'has-text' : '')\\\" class=\\\"h70\\\">\\r\\n                                        <ion-textarea formControlName=\\\"street\\\" [(ngModel)]=\\\"data.street\\\" placeholder=\\\"Address\\\"></ion-textarea>\\r\\n                                      \\r\\n                                        <ion-text *ngIf=\\\"submitted && f2.street.errors\\\" class=\\\"cs-error\\\">\\r\\n                                                <span *ngIf=\\\"f2.street.errors.minlength\\\">Minimum 5 Letter Required</span>\\r\\n                                        </ion-text>\\r\\n                                    </ion-item>\\r\\n\\r\\n                                    \\r\\n                                    <ion-item [ngClass]=\\\"submitted && f2.state.errors && f2.state.errors.required ? 'has-error' : (f2.state.errors && !f2.state.errors.required ? 'has-text' : '')\\\" class=\\\"cs-select\\\">\\r\\n\\r\\n                                        <ion-label>State</ion-label>\\r\\n\\r\\n                                        <ionic-selectable\\r\\n                                        [(ngModel)]=\\\"data.state\\\"\\r\\n                                        [items]=\\\"stateList\\\"\\r\\n                                        itemValueField=\\\"state_name\\\"\\r\\n                                        itemTextField=\\\"state_name\\\"\\r\\n                                        formControlName=\\\"state\\\"\\r\\n                                        [canSearch]=\\\"true\\\"\\r\\n                                        (onChange)=\\\"onGetDistrictListHandler($event)\\\">\\r\\n\\r\\n                                        </ionic-selectable>\\r\\n\\r\\n                                    </ion-item>\\r\\n\\r\\n                                    \\r\\n                                    <ion-item [ngClass]=\\\"submitted && f2.district.errors && f2.district.errors.required ? 'has-error' : (f2.district.errors && !f2.district.errors.required ? 'has-text' : '')\\\" class=\\\"cs-select\\\">\\r\\n                                        <ion-label>District</ion-label>\\r\\n\\r\\n                                        <ionic-selectable\\r\\n                                        [(ngModel)]=\\\"data.district\\\"\\r\\n                                        [items]=\\\"districtList\\\"\\r\\n                                        itemValueField=\\\"district_name\\\"\\r\\n                                        itemTextField=\\\"district_name\\\"\\r\\n                                        formControlName=\\\"district\\\"\\r\\n                                        [canSearch]=\\\"true\\\">\\r\\n\\r\\n                                        </ionic-selectable>\\r\\n                                    </ion-item>\\r\\n                                    \\r\\n                                    <ion-item [ngClass]=\\\"submitted && f2.city.errors && f2.city.errors.required ? 'has-error' : (f2.city.errors && !f2.city.errors.required ? 'has-text' : '')\\\">\\r\\n                                        <ion-label position=\\\"floating\\\">City</ion-label>\\r\\n                                        <ion-input formControlName=\\\"city\\\" [(ngModel)]=\\\"data.city\\\"></ion-input>\\r\\n\\r\\n                                        <ion-text *ngIf=\\\"submitted && f2.city.errors\\\" class=\\\"cs-error\\\">\\r\\n    \\r\\n                                                <span *ngIf=\\\"f2.city.errors.minlength\\\">Minimum 4 Letter Required</span>\\r\\n                \\r\\n                                        </ion-text>\\r\\n\\r\\n                                    </ion-item>\\r\\n\\r\\n\\r\\n                                    <ion-item [ngClass]=\\\"submitted && f2.pincode.errors && f2.pincode.errors.required ? 'has-error' : (f2.pincode.errors && !f2.pincode.errors.required ? 'has-text' : '')\\\">\\r\\n                                        <ion-label position=\\\"floating\\\">Pin Code</ion-label>\\r\\n                                        <ion-input type=\\\"tel\\\" formControlName=\\\"pincode\\\" [(ngModel)]=\\\"data.pincode\\\"  minlength =\\\"6 \\\"maxlength=\\\"6\\\" (keypress)=\\\"dbService.numberOnly($event)\\\"></ion-input>\\r\\n\\r\\n                                        <ion-text *ngIf=\\\"submitted && f2.pincode.errors\\\" class=\\\"cs-error\\\">\\r\\n    \\r\\n                                                <span *ngIf=\\\"f2.pincode.errors.minlength || f2.pincode.errors.maxlength\\\">Pincode Must Be 6 Digit!</span>\\r\\n                \\r\\n                                        </ion-text>\\r\\n\\r\\n                                    </ion-item>\\r\\n\\r\\n\\r\\n                                </div>\\r\\n                              </form>\\r\\n\\r\\n                            </div>\\r\\n                            \\r\\n\\r\\n                            <div class=\\\"heading\\\">\\r\\n                                <h2>Contact Person Info</h2>\\r\\n                            </div>\\r\\n                            <div class=\\\"contact_person\\\">\\r\\n                            <form [formGroup]=\\\"registerForm3\\\" (ngSubmit)=\\\"onNextStageHandler(3)\\\">\\r\\n                        \\r\\n                                <div class=\\\"common_form inner_page\\\">\\r\\n\\r\\n                                    <ion-item [ngClass]=\\\"submitted && f3.contactName.errors && f3.contactName.errors.required ? 'has-error' : (f3.contactName.errors && !f3.contactName.errors.required ? 'has-text' : '')\\\">\\r\\n                                        <ion-label position=\\\"floating\\\">Name</ion-label>\\r\\n                                        <ion-input formControlName=\\\"contactName\\\" [(ngModel)]=\\\"data.contactName\\\" autocomplete=\\\"off\\\"></ion-input>\\r\\n\\r\\n                                        <ion-text *ngIf=\\\"submitted && f3.contactName.errors\\\" class=\\\"cs-error\\\">\\r\\n    \\r\\n                                                <span *ngIf=\\\"f3.contactName.errors.minlength\\\">Minimum 3 Letter Required</span>\\r\\n    \\r\\n                                                <span *ngIf=\\\"f3.contactName.errors.maxlength\\\">Maximum 50 Letter Allowed</span>\\r\\n                \\r\\n                                        </ion-text>\\r\\n\\r\\n                                    </ion-item>\\r\\n\\r\\n\\r\\n                                    <ion-item [ngClass]=\\\"submitted && f3.designation.errors && f3.designation.errors.required ? 'has-error' : (f3.designation.errors && !f3.designation.errors.required ? 'has-text' : '')\\\">\\r\\n                                        <ion-label position=\\\"floating\\\">Designation</ion-label>\\r\\n                                        <ion-input formControlName=\\\"designation\\\" [(ngModel)]=\\\"data.designation\\\" autocomplete=\\\"off\\\"></ion-input>\\r\\n                                            <ion-text *ngIf=\\\"submitted && f3.designation.errors\\\" class=\\\"cs-error\\\">\\r\\n        \\r\\n                                                    <span *ngIf=\\\"f3.designation.errors.minlength\\\">Minimum 3 Letter Required</span>\\r\\n        \\r\\n                                                    <span *ngIf=\\\"f3.designation.errors.maxlength\\\">Maximum 50 Letter Allowed</span>\\r\\n                    \\r\\n                                            </ion-text>\\r\\n                                    </ion-item>\\r\\n\\r\\n\\r\\n                                    <ion-item [ngClass]=\\\"submitted && f3.contactEmail.errors && f3.contactEmail.errors.required ? 'has-error' : (f3.contactEmail.errors && !f3.contactEmail.errors.required ? 'has-text' : '')\\\">\\r\\n                                        <ion-label position=\\\"floating\\\">Email ID</ion-label>\\r\\n                                        <ion-input formControlName=\\\"contactEmail\\\" [(ngModel)]=\\\"data.contactEmail\\\" autocomplete=\\\"off\\\"></ion-input>\\r\\n                                        <ion-text *ngIf=\\\"submitted && f3.contactEmail.errors\\\" class=\\\"cs-error\\\">\\r\\n    \\r\\n                                                <span *ngIf=\\\"!f3.contactEmail.errors.required\\\">Email Invalid!</span>\\r\\n                \\r\\n                                        </ion-text>\\r\\n                                    </ion-item>\\r\\n\\r\\n\\r\\n                                    <ion-item [ngClass]=\\\"submitted && f3.contactMobile.errors && f3.contactMobile.errors.required ? 'has-error' : (f3.contactMobile.errors && !f3.contactMobile.errors.required ? 'has-text' : '')\\\">\\r\\n                                        <ion-label position=\\\"floating\\\">Mobile No.</ion-label>\\r\\n                                        <ion-input type=\\\"tel\\\" formControlName=\\\"contactMobile\\\" [(ngModel)]=\\\"data.contactMobile\\\" minlength = 10 maxlength=\\\"10\\\" (keypress)=\\\"dbService.numberOnly($event)\\\" autocomplete=\\\"off\\\"></ion-input>\\r\\n                                  \\r\\n                                        <ion-text *ngIf=\\\"submitted && f3.contactMobile.errors\\\" class=\\\"cs-error\\\">\\r\\n    \\r\\n                                                <span *ngIf=\\\"f3.contactMobile.errors.minlength\\\">Mobile must be 10 digit!</span>\\r\\n    \\r\\n                                                <span *ngIf=\\\"f3.contactMobile.errors.maxlength\\\">Mobile Must be 10 Digit</span>\\r\\n                \\r\\n                                        </ion-text>\\r\\n                                    </ion-item>\\r\\n\\r\\n\\r\\n                                </div>\\r\\n                            </form>\\r\\n                            \\r\\n                                <div class=\\\"cs-btn mt16 lr\\\">\\r\\n                                    <ion-button (click)=\\\"onSaveRegistrationHandler()\\\" class=\\\"success min w100\\\">SAVE</ion-button>\\r\\n                                </div>\\r\\n                                \\r\\n                            </div>\\r\\n                            \\r\\n                        </div>\\r\\n                    </div>\\r\\n                    \\r\\n                </div>\\r\\n                \\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</ion-content>\"","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { RegistrationPage } from './registration.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: RegistrationPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class RegistrationPageRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { RegistrationPageRoutingModule } from './registration-routing.module';\r\n\r\nimport { RegistrationPage } from './registration.page';\r\nimport { IonicSelectableModule } from 'ionic-selectable';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    IonicModule,\r\n    IonicSelectableModule,\r\n    RegistrationPageRoutingModule\r\n  ],\r\n  declarations: [RegistrationPage]\r\n})\r\nexport class RegistrationPageModule {}\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2N1c3RvbWVyX2FwcC9yZWdpc3RyYXRpb24vcmVnaXN0cmF0aW9uLnBhZ2Uuc2NzcyJ9 */\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { PopoverController } from '@ionic/angular';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { LoadingController, AlertController, ModalController } from '@ionic/angular';\r\nimport { DbServiceService } from 'src/app/db-service.service';\r\n\r\nimport * as moment from 'moment';\r\n\r\n@Component({\r\n  selector: 'app-registration',\r\n  templateUrl: './registration.page.html',\r\n  styleUrls: ['./registration.page.scss'],\r\n})\r\nexport class RegistrationPage implements OnInit {\r\n\r\n\r\n  activeStage: any = 1;\r\n\r\n  stateList: any = [];\r\n  districtList: any = [];\r\n\r\n  contactData: any = [];\r\n\r\n  data: any = {};\r\n\r\n  submitted: any = false;\r\n  minDate: any  = '';\r\n\r\n  currentActiveCheckTab: any = 0;\r\n\r\n  registerForm1: FormGroup;\r\n  registerForm2: FormGroup;\r\n  registerForm3: FormGroup;\r\n\r\n  constructor(private route: Router,\r\n              public routeParams: ActivatedRoute,\r\n              private formBuilder: FormBuilder,\r\n              public alertCtrl: AlertController,\r\n              public modalController: ModalController,\r\n              public dbService: DbServiceService) {\r\n\r\n            this.registerForm1 = this.formBuilder.group({\r\n\r\n                companyName: ['', [Validators.required, Validators.minLength(5)]],\r\n                projectName: ['', [Validators.required, Validators.minLength(5)]],\r\n                email: ['', [Validators.required, Validators.email]],\r\n                username: ['', [Validators.required, Validators.minLength(5)]],                \r\n                password: ['', [Validators.required, Validators.minLength(5)]],\r\n                landlineNo: ['', [Validators.required, Validators.minLength(5), Validators.maxLength(30)]],\r\n            });\r\n\r\n            this.registerForm2 = this.formBuilder.group({\r\n\r\n                  street: ['', [Validators.minLength(5)]],\r\n                  state: ['', [Validators.required]],\r\n                  district: ['', [Validators.required]],\r\n                  city: ['', [Validators.required, Validators.minLength(4)]],\r\n                  pincode: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(6)]]\r\n            });\r\n\r\n\r\n            this.registerForm3 = this.formBuilder.group({\r\n\r\n                contactName: ['', [Validators.minLength(3), Validators.maxLength(50)]],\r\n                designation: ['', [ Validators.minLength(3), Validators.maxLength(50)]],\r\n                contactEmail: ['', [ Validators.email]],\r\n                contactMobile: ['', [ Validators.minLength(10), Validators.maxLength(10)]],\r\n            });\r\n  }\r\n\r\n\r\n    ngOnInit() {\r\n\r\n        this.onGetStateListHandler();\r\n    }\r\n\r\n\r\n    async onSaveRegistrationHandler() {\r\n\r\n        console.log(this.data);\r\n\r\n        this.submitted = true;\r\n\r\n        let isContactDataFilled = false;\r\n\r\n        if(!this.data.district || !this.data.district['district_name']) {\r\n\r\n              this.data.district = '';\r\n        }\r\n\r\n        if (this.data.contactName || this.data.designation || this.data.contactEmail || this.data.contactMobile) {\r\n            isContactDataFilled = true;\r\n        }\r\n\r\n        if(isContactDataFilled && (!this.data.contactName || !this.data.designation || !this.data.contactEmail || !this.data.contactMobile)) {\r\n\r\n             this.dbService.onShowAlertMessage('Error', 'Fill Contact Complete Details!');\r\n             return;\r\n        }\r\n\r\n        if (this.registerForm1.invalid || this.registerForm2.invalid || this.registerForm3.invalid) {\r\n\r\n            return;\r\n\r\n        } else {\r\n\r\n            console.log('hello');\r\n\r\n            if (this.data.contactName && this.data.contactEmail && this.data.designation && this.data.contactMobile) {\r\n\r\n                  this.contactData.push({\r\n                      contactName: this.data.contactName,\r\n                      designation: this.data.designation,\r\n                      contactEmail: this.data.contactEmail,\r\n                      contactMobile: this.data.contactMobile\r\n                  });\r\n\r\n                  this.data.contactName = '';\r\n                  this.data.designation = '';\r\n                  this.data.contactMobile = '';\r\n                  this.data.contactEmail = '';\r\n                  this.submitted = false;\r\n\r\n            }\r\n\r\n            if (this.contactData.length == 0) {\r\n\r\n                 this.dbService.onShowAlertMessage('Error', 'No Contact Added!');\r\n                 return;\r\n            }\r\n\r\n            console.log(this.data);\r\n\r\n            const alert = await this.alertCtrl.create({\r\n              header: 'Confirm',\r\n              message: 'Are You Sure, You Want To Register ?',\r\n              buttons: [\r\n                    {\r\n                      text: 'No',\r\n                      role: 'cancel',\r\n                      handler: () => {\r\n                        console.log('No clicked');\r\n                      }\r\n                    },\r\n                    {\r\n                      text: 'Yes',\r\n                      handler: () => {\r\n\r\n                          console.log('Yes clicked');\r\n\r\n                          const inputData = JSON.parse(JSON.stringify(this.data));\r\n\r\n                          inputData[`stateName`] = inputData[`state`][`state_name`];\r\n                          inputData[`districtName`] = inputData[`district`][`district_name`];\r\n                          inputData[`contactData`] = this.contactData;\r\n\r\n                          this.dbService.presentLoader();\r\n\r\n                          this.dbService.onPostRequestHandler(inputData, 'login/onRegisterCustomerAccount').subscribe((result) => {\r\n\r\n                                console.log(result);\r\n\r\n                                this.dbService.dismissLoader();\r\n\r\n                                if (result[`status`] == 'error') {\r\n\r\n                                    this.dbService.onShowAlertMessage('Error', result[`statusMessage`]);\r\n                                    this.route.navigate(['/customerlogin']);\r\n\r\n        \r\n                                } else {\r\n              \r\n                                    const loginData = {\r\n                                        // loginType: result[`loginData`][`loginType`],\r\n                                        loginId: result[`loginData`][`loginId`],\r\n                                        loginName: result[`loginData`][`loginName`],\r\n                                        loginStatus: result[`loginData`][`loginStatus`]\r\n                                    };\r\n                                    \r\n              \r\n                                    localStorage.setItem('loginData', JSON.stringify(loginData));\r\n              \r\n                                    console.log(JSON.parse(localStorage.getItem('loginData')));\r\n                                    \r\n                                    this.dbService.onShowAlertMessage('Success', 'Login Request sent, wait till Verification complete.');\r\n\r\n                                    this.route.navigate(['/customerlogin']);\r\n                                    \r\n                                }\r\n                          });\r\n                      }\r\n                    }\r\n                ]\r\n            });\r\n\r\n            await alert.present();\r\n\r\n        }\r\n    }\r\n\r\n\r\n    async onGetStateListHandler() {\r\n\r\n        const inputData = {};\r\n\r\n        this.dbService.onPostRequestHandler(inputData, 'task/getStateList').subscribe((result) => {\r\n\r\n              console.log(result);\r\n              this.stateList = result[`stateList`];\r\n\r\n        });\r\n    }\r\n\r\n    async onGetDistrictListHandler() {\r\n\r\n        this.data.district =  '';\r\n        this.districtList = [];\r\n\r\n        const inputData = {\r\n            stateName: this.data.state[`state_name`]\r\n        };\r\n\r\n        this.dbService.presentLoader();\r\n\r\n        this.dbService.onPostRequestHandler(inputData, 'task/getDistrictList').subscribe((result) => {\r\n\r\n              console.log(result);\r\n              this.districtList = result[`districtList`];\r\n              this.dbService.dismissLoader();\r\n\r\n        });\r\n    }\r\n\r\n\r\n\r\n    async onNextStageHandler(stage) {\r\n\r\n        this.submitted = true;\r\n        console.log(this.registerForm2);\r\n\r\n        if (this['registerForm' + stage + ''].invalid) {\r\n\r\n              if (stage == 1) {\r\n\r\n                  this['registerForm' + stage + ''].get('companyName').markAsTouched();\r\n                  this['registerForm' + stage + ''].get('email').markAsTouched();\r\n                  // this['registerForm' + stage + ''].get('mobile').markAsTouched();\r\n                  this['registerForm' + stage + ''].get('landlineNo').markAsTouched();\r\n  \r\n\r\n              } else if (stage == 2) {\r\n\r\n                  this['registerForm' + stage + ''].get('street').markAsTouched();\r\n                  this['registerForm' + stage + ''].get('state').markAsTouched();\r\n                  this['registerForm' + stage + ''].get('district').markAsTouched();\r\n                  this['registerForm' + stage + ''].get('city').markAsTouched();\r\n                  this['registerForm' + stage + ''].get('pincode').markAsTouched();\r\n\r\n\r\n              } else if (stage == 3) {\r\n\r\n                  this['registerForm' + stage + ''].get('contactName').markAsTouched();\r\n                  this['registerForm' + stage + ''].get('designation').markAsTouched();\r\n                  this['registerForm' + stage + ''].get('contactEmail').markAsTouched();\r\n                  this['registerForm' + stage + ''].get('contactMobile').markAsTouched();\r\n              }\r\n\r\n              return;\r\n\r\n        } else {\r\n\r\n              console.log(this.data);\r\n\r\n\r\n              // if (this.activeStage == 3) {\r\n\r\n                    if (!this.data.contactName || !this.data.designation || !this.data.contactEmail || !this.data.contactMobile) {\r\n\r\n                         this.dbService.onShowAlertMessage('Error', 'Fill contact complete Detail!');\r\n                         return false;\r\n                    }\r\n\r\n                    this.contactData.push({\r\n\r\n                        contactName: this.data.contactName,\r\n                        designation: this.data.designation,\r\n                        contactEmail: this.data.contactEmail,\r\n                        contactMobile: this.data.contactMobile\r\n                    });\r\n\r\n                    this.data.contactName = '';\r\n                    this.data.contactMobile = '';\r\n                    this.data.designation = '';\r\n                    this.data.contactEmail = '';\r\n\r\n                    this.submitted = false;\r\n\r\n              // } else {\r\n\r\n              //    this.activeStage += 1;\r\n              //    this.submitted = false;\r\n              // }\r\n        }\r\n    }\r\n\r\n    async onDeleteContactHandler(index) {\r\n\r\n      const alert = await this.alertCtrl.create({\r\n        header: 'Confirm',\r\n        message: 'Are You Sure, You Want To Delete Contact ?',\r\n        buttons: [\r\n              {\r\n                text: 'No',\r\n                role: 'cancel',\r\n                handler: () => {\r\n                  console.log('No clicked');\r\n                }\r\n              },\r\n              {\r\n                text: 'Yes',\r\n                handler: () => {\r\n\r\n                     console.log('Yes clicked');\r\n\r\n                     this.contactData.splice(index, 1);\r\n                     this.dbService.presentToast('Contact Deleted Successfully!');\r\n                }\r\n              }\r\n          ]\r\n      });\r\n\r\n      await alert.present();\r\n\r\n    }\r\n\r\n\r\n    async onBackClickHandler(stage)  {\r\n          this.activeStage = stage - 1;\r\n    }\r\n\r\n    get f1() { return this.registerForm1.controls; }\r\n    get f2() { return this.registerForm2.controls; }\r\n    get f3() { return this.registerForm3.controls; }\r\n\r\n}\r\n"],"sourceRoot":""}