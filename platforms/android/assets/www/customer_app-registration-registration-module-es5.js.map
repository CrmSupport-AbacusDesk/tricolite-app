{"version":3,"sources":["src/app/customer_app/registration/registration.page.html","src/app/customer_app/registration/registration-routing.module.ts","src/app/customer_app/registration/registration.module.ts","src/app/customer_app/registration/registration.page.scss","src/app/customer_app/registration/registration.page.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<ion-content>\\r\\n    <div class=\\\"login-container\\\">\\r\\n        <div class=\\\"logo\\\"><img src=\\\"../../assets/img/logo.jpg\\\" alt=\\\"\\\"></div>\\r\\n        \\r\\n        <div class=\\\"form-container\\\">\\r\\n            \\r\\n            <div class=\\\"head\\\">\\r\\n                <div class=\\\"heading\\\">\\r\\n                    <h1>Sign Up</h1>\\r\\n                    <ion-button fill=\\\"clear\\\" routerLink=\\\"/customerlogin\\\"><i class=\\\"material-icons\\\">arrow_right_alt</i> Back To Login</ion-button>\\r\\n                    \\r\\n                </div>\\r\\n            </div>\\r\\n            \\r\\n            <div class=\\\"input-container mt10\\\">\\r\\n                <div class=\\\"custome-filter dlform\\\">\\r\\n                    <div class=\\\"fiter-data\\\">\\r\\n                        <div class=\\\"cs-right\\\">\\r\\n                            <div class=\\\"heading\\\">\\r\\n                                <h2>Basic Info</h2>\\r\\n                              \\r\\n                                \\r\\n                            </div>\\r\\n                            <div  class=\\\"basic_info mb16\\\">\\r\\n                                <form [formGroup]=\\\"registerForm1\\\" (ngSubmit)=\\\"onNextStageHandler(1)\\\">\\r\\n                                    <div class=\\\"common_form inner_page\\\">\\r\\n                                        <!-- <ion-item [ngClass]=\\\"submitted && f1.companyName.errors && f1.companyName.errors.required ? 'has-error' : (f1.companyName.errors && !f1.companyName.errors.required ? 'has-text' : '')\\\">\\r\\n                                            <ion-label position=\\\"floating\\\">Company Name</ion-label>\\r\\n                                            <ion-input formControlName=\\\"companyName\\\" [(ngModel)]=\\\"data.companyName\\\" autocomplete=\\\"nope\\\"></ion-input>\\r\\n\\r\\n                                            <ion-text *ngIf=\\\"submitted && f1.companyName.errors\\\" class=\\\"cs-error\\\">\\r\\n    \\r\\n                                                <span *ngIf=\\\"f1.companyName.errors.minlength\\\">Minimum 5 Letter Required</span>\\r\\n                \\r\\n                                            </ion-text>                                \\r\\n\\r\\n                                        </ion-item> -->\\r\\n                                        <ion-item [ngClass]=\\\"submitted && f1.name.errors && f1.name.errors.required ? 'has-error' : (f1.name.errors && !f1.name.errors.required ? 'has-text' : '')\\\">\\r\\n                                            <ion-label position=\\\"floating\\\"> Name</ion-label>\\r\\n                                            <ion-input formControlName=\\\"name\\\" [(ngModel)]=\\\"data.name\\\" autocomplete=\\\"nope\\\"></ion-input>\\r\\n\\r\\n                                            <ion-text *ngIf=\\\"submitted && f1.name.errors\\\" class=\\\"cs-error\\\">\\r\\n    \\r\\n                                                <span *ngIf=\\\"f1.name.errors.minlength\\\">Minimum 5 Letter Required</span>\\r\\n                \\r\\n                                            </ion-text>                                \\r\\n\\r\\n                                        </ion-item>\\r\\n\\r\\n                                        <!-- <ion-item [ngClass]=\\\"submitted && f1.email.errors && f1.email.errors.required ? 'has-error' : (f1.email.errors && !f1.email.errors.required ? 'has-text' : '')\\\">\\r\\n                                            <ion-label position=\\\"floating\\\"> Corporate Mail</ion-label>\\r\\n                                            <ion-input formControlName=\\\"email\\\" [(ngModel)]=\\\"data.email\\\" autocomplete=\\\"nope\\\"></ion-input>\\r\\n\\r\\n                                            <ion-text *ngIf=\\\"submitted && f1.email.errors\\\" class=\\\"cs-error\\\">\\r\\n    \\r\\n                                                    <span *ngIf=\\\"!f1.email.errors.required\\\">Email Invalid</span>\\r\\n                    \\r\\n                                            </ion-text>\\r\\n\\r\\n                                        </ion-item> -->\\r\\n                                        <ion-item [ngClass]=\\\"submitted && f1.designation.errors && f1.designation.errors.required ? 'has-error' : (f1.designation.errors && !f1.designation.errors.required ? 'has-text' : '')\\\">\\r\\n                                            <ion-label position=\\\"floating\\\">Designation</ion-label>\\r\\n                                            <ion-input formControlName=\\\"designation\\\" [(ngModel)]=\\\"data.designation\\\" autocomplete=\\\"nope\\\"></ion-input>\\r\\n\\r\\n                                            <ion-text *ngIf=\\\"submitted && f1.designation.errors\\\" class=\\\"cs-error\\\">\\r\\n    \\r\\n                                                <span *ngIf=\\\"f1.designation.errors.minlength\\\">Minimum 5 Letter Required</span>\\r\\n                \\r\\n                                            </ion-text>                                \\r\\n\\r\\n                                        </ion-item>\\r\\n                                        <!-- <ion-item [ngClass]=\\\"submitted && f1.landlineNo.errors && f1.landlineNo.errors.required ? 'has-error' : (f1.landlineNo.errors && !f1.landlineNo.errors.required ? 'has-text' : '')\\\">\\r\\n                                            <ion-label position=\\\"floating\\\">Corporate Mobile No.</ion-label>\\r\\n                                            <ion-input type=\\\"tel\\\" formControlName=\\\"landlineNo\\\" [(ngModel)]=\\\"data.landlineNo\\\"   minlength = \\\"10\\\" maxlength=\\\"10\\\" (keypress)=\\\"dbService.numberOnly($event)\\\" autocomplete=\\\"nope\\\"></ion-input>\\r\\n\\r\\n                                            <ion-text *ngIf=\\\"submitted && f1.landlineNo.errors\\\" class=\\\"cs-error\\\">\\r\\n    \\r\\n                                                <span *ngIf=\\\"f1.landlineNo.errors.minlength\\\">Minimum 10 Digit Required</span>\\r\\n    \\r\\n                                                <span *ngIf=\\\"f1.landlineNo.errors.maxlength\\\">Maximum 10 Digit Required</span>\\r\\n                    \\r\\n                                            </ion-text>\\r\\n\\r\\n                                        </ion-item> -->\\r\\n                                        <ion-item [ngClass]=\\\"submitted && f1.email.errors && f1.email.errors.required ? 'has-error' : (f1.email.errors && !f1.email.errors.required ? 'has-text' : '')\\\">\\r\\n                                            <ion-label position=\\\"floating\\\">Mobile No.</ion-label>\\r\\n                                            <ion-input type=\\\"tel\\\" formControlName=\\\"landlineNo\\\" [(ngModel)]=\\\"data.landlineNo\\\"   minlength = \\\"10\\\" maxlength=\\\"10\\\" (keypress)=\\\"dbService.numberOnly($event)\\\" autocomplete=\\\"nope\\\"></ion-input>\\r\\n\\r\\n                                            <ion-text *ngIf=\\\"submitted && f1.landlineNo.errors\\\" class=\\\"cs-error\\\">\\r\\n    \\r\\n                                                <span *ngIf=\\\"f1.landlineNo.errors.minlength\\\">Minimum 10 Digit Required</span>\\r\\n    \\r\\n                                                <span *ngIf=\\\"f1.landlineNo.errors.maxlength\\\">Maximum 10 Digit Required</span>\\r\\n                    \\r\\n                                            </ion-text>\\r\\n\\r\\n                                        </ion-item>\\r\\n                                         <ion-item [ngClass]=\\\"submitted && f1.email.errors && f1.email.errors.required ? 'has-error' : (f1.email.errors && !f1.email.errors.required ? 'has-text' : '')\\\">\\r\\n                                            <ion-label position=\\\"floating\\\">Email ID(please enter here only official email id)</ion-label>\\r\\n                                            <ion-input formControlName=\\\"email\\\" [(ngModel)]=\\\"data.email\\\" autocomplete=\\\"nope\\\"></ion-input>\\r\\n\\r\\n                                            <ion-text *ngIf=\\\"submitted && f1.email.errors\\\" class=\\\"cs-error\\\">\\r\\n    \\r\\n                                                    <span *ngIf=\\\"!f1.email.errors.required\\\">Email Invalid</span>\\r\\n                    \\r\\n                                            </ion-text>\\r\\n\\r\\n                                        </ion-item> \\r\\n                                       <ion-item [ngClass]=\\\"submitted && f1.companyName.errors && f1.companyName.errors.required ? 'has-error' : (f1.companyName.errors && !f1.companyName.errors.required ? 'has-text' : '')\\\">\\r\\n                                            <ion-label position=\\\"floating\\\">Company Name</ion-label>\\r\\n                                            <ion-input formControlName=\\\"companyName\\\" [(ngModel)]=\\\"data.companyName\\\" autocomplete=\\\"nope\\\"></ion-input>\\r\\n\\r\\n                                            <ion-text *ngIf=\\\"submitted && f1.companyName.errors\\\" class=\\\"cs-error\\\">\\r\\n    \\r\\n                                                <span *ngIf=\\\"f1.companyName.errors.minlength\\\">Minimum 5 Letter Required</span>\\r\\n                \\r\\n                                            </ion-text>                                \\r\\n\\r\\n                                        </ion-item> \\r\\n\\r\\n                                        <ion-item [ngClass]=\\\"submitted && f1.username.errors && f1.username.errors.required ? 'has-error' : (f1.username.errors && !f1.username.errors.required ? 'has-text' : '')\\\">\\r\\n                                            <ion-label position=\\\"floating\\\">Username</ion-label>\\r\\n                                            <ion-input type=\\\"text\\\" formControlName=\\\"username\\\" [(ngModel)]=\\\"data.username\\\" autocomplete=\\\"nope\\\"></ion-input>\\r\\n                                        </ion-item>\\r\\n\\r\\n                                        <ion-item [ngClass]=\\\"submitted && f1.password.errors && f1.password.errors.required ? 'has-error' : (f1.password.errors && !f1.password.errors.required ? 'has-text' : '')\\\">\\r\\n                                            <ion-label position=\\\"floating\\\">Password</ion-label>\\r\\n                                            <ion-input type=\\\"password\\\" formControlName=\\\"password\\\" [(ngModel)]=\\\"data.password\\\" autocomplete=\\\"nope\\\"></ion-input>\\r\\n                                        </ion-item>\\r\\n                                        <ion-item [ngClass]=\\\"submitted && f1.superiorName.errors && f1.superiorName.errors.required ? 'has-error' : (f1.superiorName.errors && !f1.superiorName.errors.required ? 'has-text' : '')\\\">\\r\\n                                            <ion-label position=\\\"floating\\\">Superior Name</ion-label>\\r\\n                                            <ion-input formControlName=\\\"superiorName\\\" [(ngModel)]=\\\"data.superiorName\\\" autocomplete=\\\"nope\\\"></ion-input>\\r\\n\\r\\n                                            <ion-text *ngIf=\\\"submitted && f1.superiorName.errors\\\" class=\\\"cs-error\\\">\\r\\n    \\r\\n                                                <span *ngIf=\\\"f1.superiorName.errors.minlength\\\">Minimum 5 Letter Required</span>\\r\\n                \\r\\n                                            </ion-text>                                \\r\\n\\r\\n                                        </ion-item> \\r\\n                                         <ion-item [ngClass]=\\\"submitted && f1.superioremail.errors && f1.superioremail.errors.required ? 'has-error' : (f1.superioremail.errors && !f1.superioremail.errors.required ? 'has-text' : '')\\\">\\r\\n                                            <ion-label position=\\\"floating\\\"> Superior Email ID</ion-label>\\r\\n                                            <ion-input formControlName=\\\"superioremail\\\" [(ngModel)]=\\\"data.superioremail\\\" autocomplete=\\\"nope\\\"></ion-input>\\r\\n\\r\\n                                            <ion-text *ngIf=\\\"submitted && f1.superioremail.errors\\\" class=\\\"cs-error\\\">\\r\\n    \\r\\n                                                    <span *ngIf=\\\"!f1.superioremail.errors.required\\\">Email Invalid</span>\\r\\n                    \\r\\n                                            </ion-text>\\r\\n\\r\\n                                        </ion-item> \\r\\n                                        <div class=\\\"heading\\\">\\r\\n                                            <h2>Project Info</h2>\\r\\n                                        </div>\\r\\n                                        <ion-item >\\r\\n                                            <ion-label position=\\\"floating\\\">Sales Order No.(SO No.)</ion-label>\\r\\n                                            <ion-input formControlName=\\\"so_no\\\" [(ngModel)]=\\\"data.so_no\\\" (keyup) = \\\"onSonoHandler()\\\" autocomplete=\\\"nope\\\"></ion-input>\\r\\n\\r\\n                                                                           \\r\\n\\r\\n                                        </ion-item>  <ion-item >\\r\\n                                            <ion-label position=\\\"floating\\\">Fg no.</ion-label>\\r\\n                                            <ion-input formControlName=\\\"fg_no\\\" [(ngModel)]=\\\"data.fg_no\\\" (keyup) = \\\"onfgHandler()\\\" autocomplete=\\\"nope\\\"></ion-input>\\r\\n\\r\\n                                                                          \\r\\n\\r\\n                                        </ion-item> \\r\\n                                        <div class=\\\"head\\\">\\r\\n                                            <div class=\\\"heading\\\">\\r\\n                                              \\r\\n                                                <ion-button fill=\\\"clear\\\" routerLink=\\\"/imagemodal\\\"> *AVAILABLE ON PANEL NAME PLATE & DRAWING</ion-button>\\r\\n                                            </div>\\r\\n                                        </div>\\r\\n                                        <!-- <div class=\\\"heading\\\">\\r\\n                                            <h2>Project Info</h2>\\r\\n                                        </div>\\r\\n\\r\\n                                        <ion-item [ngClass]=\\\"submitted && f1.projectName.errors && f1.projectName.errors.required ? 'has-error' : (f1.projectName.errors && !f1.projectName.errors.required ? 'has-text' : '')\\\">\\r\\n                                            <ion-label position=\\\"floating\\\">Project Name</ion-label>\\r\\n                                            <ion-input formControlName=\\\"projectName\\\" [(ngModel)]=\\\"data.projectName\\\" autocomplete=\\\"nope\\\"></ion-input>\\r\\n\\r\\n                                            <ion-text *ngIf=\\\"submitted && f1.projectName.errors\\\" class=\\\"cs-error\\\">\\r\\n    \\r\\n                                                <span *ngIf=\\\"f1.projectName.errors.minlength\\\">Minimum 5 Letter Required</span>\\r\\n                \\r\\n                                            </ion-text>\\r\\n\\r\\n                                        </ion-item> -->\\r\\n\\r\\n\\r\\n                                    </div>\\r\\n\\r\\n                                </form>\\r\\n                                <div class=\\\"cs-btn mt16 lr\\\">\\r\\n                                    <ion-button (click)=\\\"onSaveRegistrationHandler()\\\" class=\\\"success min w100\\\">SAVE</ion-button>\\r\\n                                </div>\\r\\n                            </div>\\r\\n\\r\\n                            <!-- <div class=\\\"heading\\\">\\r\\n                                <h2>Address Info</h2>\\r\\n                            </div>\\r\\n                            <div  class=\\\"address mb16\\\">\\r\\n                             <form [formGroup]=\\\"registerForm2\\\" (ngSubmit)=\\\"onNextStageHandler(2)\\\">\\r\\n\\r\\n                                <div class=\\\"common_form inner_page\\\">\\r\\n                                    <ion-item [ngClass]=\\\"submitted && f2.street.errors && f2.street.errors.required ? 'has-error' : (f2.street.errors && !f2.street.errors.required ? 'has-text' : '')\\\" class=\\\"h70\\\">\\r\\n                                        <ion-textarea formControlName=\\\"street\\\" [(ngModel)]=\\\"data.street\\\" placeholder=\\\"Address\\\"></ion-textarea>\\r\\n                                      \\r\\n                                        <ion-text *ngIf=\\\"submitted && f2.street.errors\\\" class=\\\"cs-error\\\">\\r\\n                                                <span *ngIf=\\\"f2.street.errors.minlength\\\">Minimum 5 Letter Required</span>\\r\\n                                        </ion-text>\\r\\n                                    </ion-item>\\r\\n\\r\\n                                    \\r\\n                                    <ion-item [ngClass]=\\\"submitted && f2.state.errors && f2.state.errors.required ? 'has-error' : (f2.state.errors && !f2.state.errors.required ? 'has-text' : '')\\\" class=\\\"cs-select\\\">\\r\\n\\r\\n                                        <ion-label>State</ion-label>\\r\\n\\r\\n                                        <ionic-selectable\\r\\n                                        [(ngModel)]=\\\"data.state\\\"\\r\\n                                        [items]=\\\"stateList\\\"\\r\\n                                        itemValueField=\\\"state_name\\\"\\r\\n                                        itemTextField=\\\"state_name\\\"\\r\\n                                        formControlName=\\\"state\\\"\\r\\n                                        [canSearch]=\\\"true\\\"\\r\\n                                        (onChange)=\\\"onGetDistrictListHandler($event)\\\">\\r\\n\\r\\n                                        </ionic-selectable>\\r\\n\\r\\n                                    </ion-item>\\r\\n\\r\\n                                    \\r\\n                                    <ion-item [ngClass]=\\\"submitted && f2.district.errors && f2.district.errors.required ? 'has-error' : (f2.district.errors && !f2.district.errors.required ? 'has-text' : '')\\\" class=\\\"cs-select\\\">\\r\\n                                        <ion-label>District</ion-label>\\r\\n\\r\\n                                        <ionic-selectable\\r\\n                                        [(ngModel)]=\\\"data.district\\\"\\r\\n                                        [items]=\\\"districtList\\\"\\r\\n                                        itemValueField=\\\"district_name\\\"\\r\\n                                        itemTextField=\\\"district_name\\\"\\r\\n                                        formControlName=\\\"district\\\"\\r\\n                                        [canSearch]=\\\"true\\\">\\r\\n\\r\\n                                        </ionic-selectable>\\r\\n                                    </ion-item>\\r\\n                                    \\r\\n                                    <ion-item [ngClass]=\\\"submitted && f2.city.errors && f2.city.errors.required ? 'has-error' : (f2.city.errors && !f2.city.errors.required ? 'has-text' : '')\\\">\\r\\n                                        <ion-label position=\\\"floating\\\">City</ion-label>\\r\\n                                        <ion-input formControlName=\\\"city\\\" [(ngModel)]=\\\"data.city\\\" ></ion-input>\\r\\n\\r\\n                                        <ion-text *ngIf=\\\"submitted && f2.city.errors\\\" class=\\\"cs-error\\\">\\r\\n    \\r\\n                                                <span *ngIf=\\\"f2.city.errors.minlength\\\">Minimum 4 Letter Required</span>\\r\\n                \\r\\n                                        </ion-text>\\r\\n\\r\\n                                    </ion-item>\\r\\n\\r\\n\\r\\n                                    <ion-item [ngClass]=\\\"submitted && f2.pincode.errors && f2.pincode.errors.required ? 'has-error' : (f2.pincode.errors && !f2.pincode.errors.required ? 'has-text' : '')\\\">\\r\\n                                        <ion-label position=\\\"floating\\\">Pin Code</ion-label>\\r\\n                                        <ion-input type=\\\"tel\\\" formControlName=\\\"pincode\\\" [(ngModel)]=\\\"data.pincode\\\"  minlength =\\\"6 \\\"maxlength=\\\"6\\\" (keypress)=\\\"dbService.numberOnly($event)\\\"></ion-input>\\r\\n\\r\\n                                        <ion-text *ngIf=\\\"submitted && f2.pincode.errors\\\" class=\\\"cs-error\\\">\\r\\n    \\r\\n                                                <span *ngIf=\\\"f2.pincode.errors.minlength || f2.pincode.errors.maxlength\\\">Pincode Must Be 6 Digit!</span>\\r\\n                \\r\\n                                        </ion-text>\\r\\n\\r\\n                                    </ion-item>\\r\\n\\r\\n\\r\\n                                </div>\\r\\n                              </form>\\r\\n\\r\\n                            </div>\\r\\n                        \\r\\n                            <div class=\\\"heading\\\">\\r\\n                                <h2>Site Contact Person Detail</h2>\\r\\n                            </div>\\r\\n                            <div class=\\\"contact_person\\\">\\r\\n                            <form [formGroup]=\\\"registerForm3\\\" (ngSubmit)=\\\"onNextStageHandler(3)\\\">\\r\\n                        \\r\\n                                <div class=\\\"common_form inner_page\\\">\\r\\n\\r\\n                                    <ion-item [ngClass]=\\\"submitted && f3.contactName.errors && f3.contactName.errors.required ? 'has-error' : (f3.contactName.errors && !f3.contactName.errors.required ? 'has-text' : '')\\\">\\r\\n                                        <ion-label position=\\\"floating\\\">Name</ion-label>\\r\\n                                        <ion-input formControlName=\\\"contactName\\\" [(ngModel)]=\\\"data.contactName\\\" autocomplete=\\\"nope\\\"></ion-input>\\r\\n\\r\\n                                        <ion-text *ngIf=\\\"submitted && f3.contactName.errors\\\" class=\\\"cs-error\\\">\\r\\n    \\r\\n                                                <span *ngIf=\\\"f3.contactName.errors.minlength\\\">Minimum 3 Letter Required</span>\\r\\n    \\r\\n                                                <span *ngIf=\\\"f3.contactName.errors.maxlength\\\">Maximum 50 Letter Allowed</span>\\r\\n                \\r\\n                                        </ion-text>\\r\\n\\r\\n                                    </ion-item>\\r\\n\\r\\n\\r\\n                                    <ion-item [ngClass]=\\\"submitted && f3.designation.errors && f3.designation.errors.required ? 'has-error' : (f3.designation.errors && !f3.designation.errors.required ? 'has-text' : '')\\\">\\r\\n                                        <ion-label position=\\\"floating\\\">Designation</ion-label>\\r\\n                                        <ion-input formControlName=\\\"designation\\\" [(ngModel)]=\\\"data.designation\\\" autocomplete=\\\"nope\\\"></ion-input>\\r\\n                                            <ion-text *ngIf=\\\"submitted && f3.designation.errors\\\" class=\\\"cs-error\\\">\\r\\n        \\r\\n                                                    <span *ngIf=\\\"f3.designation.errors.minlength\\\">Minimum 3 Letter Required</span>\\r\\n        \\r\\n                                                    <span *ngIf=\\\"f3.designation.errors.maxlength\\\">Maximum 50 Letter Allowed</span>\\r\\n                    \\r\\n                                            </ion-text>\\r\\n                                    </ion-item>\\r\\n\\r\\n\\r\\n                                    <ion-item [ngClass]=\\\"submitted && f3.contactEmail.errors && f3.contactEmail.errors.required ? 'has-error' : (f3.contactEmail.errors && !f3.contactEmail.errors.required ? 'has-text' : '')\\\">\\r\\n                                        <ion-label position=\\\"floating\\\">Email ID</ion-label>\\r\\n                                        <ion-input formControlName=\\\"contactEmail\\\" [(ngModel)]=\\\"data.contactEmail\\\" autocomplete=\\\"nope\\\"></ion-input>\\r\\n                                        <ion-text *ngIf=\\\"submitted && f3.contactEmail.errors\\\" class=\\\"cs-error\\\">\\r\\n    \\r\\n                                                <span *ngIf=\\\"!f3.contactEmail.errors.required\\\">Email Invalid!</span>\\r\\n                \\r\\n                                        </ion-text>\\r\\n                                    </ion-item>\\r\\n\\r\\n\\r\\n                                    <ion-item [ngClass]=\\\"submitted && f3.contactMobile.errors && f3.contactMobile.errors.required ? 'has-error' : (f3.contactMobile.errors && !f3.contactMobile.errors.required ? 'has-text' : '')\\\">\\r\\n                                        <ion-label position=\\\"floating\\\">Mobile No.</ion-label>\\r\\n                                        <ion-input type=\\\"tel\\\" formControlName=\\\"contactMobile\\\" [(ngModel)]=\\\"data.contactMobile\\\" minlength = 10 maxlength=\\\"10\\\" (keypress)=\\\"dbService.numberOnly($event)\\\" autocomplete=\\\"nope\\\"></ion-input>\\r\\n                                  \\r\\n                                        <ion-text *ngIf=\\\"submitted && f3.contactMobile.errors\\\" class=\\\"cs-error\\\">\\r\\n    \\r\\n                                                <span *ngIf=\\\"f3.contactMobile.errors.minlength\\\">Mobile must be 10 digit!</span>\\r\\n    \\r\\n                                                <span *ngIf=\\\"f3.contactMobile.errors.maxlength\\\">Mobile Must be 10 Digit</span>\\r\\n                \\r\\n                                        </ion-text>\\r\\n                                    </ion-item>\\r\\n\\r\\n\\r\\n                                </div>\\r\\n                            </form>\\r\\n                            \\r\\n                                <div class=\\\"cs-btn mt16 lr\\\">\\r\\n                                    <ion-button (click)=\\\"onSaveRegistrationHandler()\\\" class=\\\"success min w100\\\">SAVE</ion-button>\\r\\n                                </div>\\r\\n                                \\r\\n                            </div> -->\\r\\n                            \\r\\n                        </div>\\r\\n                    </div>\\r\\n                    \\r\\n                </div>\\r\\n                \\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n    </div>\\r\\n</ion-content>\\r\\n\"","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { RegistrationPage } from './registration.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: RegistrationPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class RegistrationPageRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { RegistrationPageRoutingModule } from './registration-routing.module';\r\n\r\nimport { RegistrationPage } from './registration.page';\r\nimport { IonicSelectableModule } from 'ionic-selectable';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    IonicModule,\r\n    IonicSelectableModule,\r\n    RegistrationPageRoutingModule\r\n  ],\r\n  declarations: [RegistrationPage]\r\n})\r\nexport class RegistrationPageModule {}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2N1c3RvbWVyX2FwcC9yZWdpc3RyYXRpb24vcmVnaXN0cmF0aW9uLnBhZ2Uuc2NzcyJ9 */\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { PopoverController } from '@ionic/angular';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { LoadingController, AlertController, ModalController } from '@ionic/angular';\r\nimport { DbServiceService } from 'src/app/db-service.service';\r\n\r\nimport * as moment from 'moment';\r\nimport { THIS_EXPR } from '@angular/compiler/src/output/output_ast';\r\n\r\n@Component({\r\n  selector: 'app-registration',\r\n  templateUrl: './registration.page.html',\r\n  styleUrls: ['./registration.page.scss'],\r\n})\r\nexport class RegistrationPage implements OnInit {\r\n\r\n\r\n  activeStage: any = 1;\r\n  fgList2: any;\r\n\r\n  fgList: any = [];\r\n  soList: any = [];\r\n  soList2: any = [];\r\n\r\n  districtList: any = [];\r\n\r\n  contactData: any = [];\r\n\r\n  data: any = {};\r\n\r\n  submitted: any = false;\r\n  minDate: any  = '';\r\n\r\n  currentActiveCheckTab: any = 0;\r\n\r\n  registerForm1: FormGroup;\r\n  registerForm2: FormGroup;\r\n  registerForm3: FormGroup;\r\n\r\n  constructor(private route: Router,\r\n              public routeParams: ActivatedRoute,\r\n              private formBuilder: FormBuilder,\r\n              public alertCtrl: AlertController,\r\n              public modalController: ModalController,\r\n              public dbService: DbServiceService) {\r\n\r\n            this.registerForm1 = this.formBuilder.group({\r\n\r\n                name: ['', [Validators.required, Validators.minLength(5)]],\r\n                designation: ['', [Validators.required, Validators.minLength(5)]],\r\n                superiorName: ['', [Validators.required, Validators.minLength(5)]],\r\n                email: ['', [Validators.email]],\r\n                companyName: ['', [Validators.required, Validators.minLength(5)]],\r\n                so_no: ['', [Validators.required, Validators.minLength(5)]],\r\n\r\n                fg_no: ['', [Validators.required, Validators.minLength(5)]],\r\n                projectName: ['', [Validators.required, Validators.minLength(5)]],\r\n                superioremail: ['', [Validators.email]],\r\n                username: ['', [Validators.required, Validators.minLength(5)]],                \r\n                password: ['', [Validators.required, Validators.minLength(5)]],\r\n                landlineNo: ['', [ Validators.minLength(10), Validators.maxLength(10)]],\r\n            });\r\n\r\n            this.registerForm2 = this.formBuilder.group({\r\n\r\n                  street: ['', [Validators.minLength(5)]],\r\n                  state: ['', [Validators.required]],\r\n                  district: ['', [Validators.required]],\r\n                  city: ['', [Validators.required, Validators.minLength(4)]],\r\n                  pincode: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(6)]]\r\n            });\r\n\r\n\r\n            this.registerForm3 = this.formBuilder.group({\r\n\r\n                contactName: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(50)]],\r\n                designation: ['', [ Validators.minLength(3), Validators.maxLength(50)]],\r\n                contactEmail: ['', [Validators.required, Validators.email]],\r\n                contactMobile: ['', [Validators.required, Validators.minLength(10), Validators.maxLength(10)]],\r\n            });\r\n  }\r\n\r\n    ngOnInit() {\r\n\r\n        this.onGetStateListHandler();\r\n    }\r\n\r\n    async onSaveRegistrationHandler() {\r\n\r\n        console.log(this.data);\r\n\r\n        this.submitted = true;\r\n\r\n\r\n       \r\n\r\n       \r\n\r\n        if( (!this.data.so_no && !this.data.fg_no )) {\r\n\r\n             this.dbService.onShowAlertMessage('Error', 'Enter SO NO or FGNO !');\r\n             return;\r\n        }\r\n\r\n\r\n\r\n         else {\r\n\r\n            console.log('hello');\r\n\r\n\r\n         \r\n\r\n            console.log(this.data);\r\n\r\n            const alert = await this.alertCtrl.create({\r\n              header: 'Confirm',\r\n              message: 'Are You Sure, You Want To Register ?',\r\n              buttons: [\r\n                    {\r\n                      text: 'No',\r\n                      role: 'cancel',\r\n                      handler: () => {\r\n                        console.log('No clicked');\r\n                      }\r\n                    },\r\n                    {\r\n                      text: 'Yes',\r\n                      handler: () => {\r\n\r\n                          console.log('Yes clicked');\r\n\r\n                          const inputData = JSON.parse(JSON.stringify(this.data));\r\n\r\n                        \r\n                          this.dbService.presentLoader();\r\n\r\n                          this.dbService.onPostRequestHandler(inputData, 'login/onRegisterCustomerAccount').subscribe((result) => {\r\n\r\n                                console.log(result);\r\n\r\n                                this.dbService.dismissLoader();\r\n\r\n                                if (result[`status`] == 'error') {\r\n\r\n                                    this.dbService.onShowAlertMessage('Error', result[`statusMessage`]);\r\n\r\n                                } else {\r\n              \r\n                                    const loginData = {\r\n                                        loginType: result[`loginData`][`loginType`],\r\n                                        loginId: result[`loginData`][`loginId`],\r\n                                        loginName: result[`loginData`][`loginName`],\r\n                                        loginStatus: result[`loginData`][`loginStatus`]\r\n                                    };\r\n                                    \r\n              \r\n                                    localStorage.setItem('loginData', JSON.stringify(loginData));\r\n              \r\n                                    console.log(JSON.parse(localStorage.getItem('loginData')));\r\n                                    \r\n                                    this.dbService.onShowAlertMessage('Success', 'Login Request sent, wait till Verification complete.');\r\n\r\n                                    this.route.navigate(['/customerlogin']);\r\n                                    \r\n                                }\r\n                          });\r\n                      }\r\n                    }\r\n                ]\r\n            });\r\n\r\n            await alert.present();\r\n\r\n        }\r\n    }\r\n    async onSonoHandler(){\r\n      const inputData = {\r\n        so_no: this.data.so_no,\r\n        \r\n    };\r\n      this.dbService.onPostRequestHandler(inputData, 'login/checkSono').subscribe((result) => {\r\n\r\n        console.log(result);\r\n        this.fgList = result[`fg`];\r\n         console.log(this.fgList);\r\n        \r\n\r\n        \r\n         \r\n  });\r\n    }\r\n\r\n\r\n    async onfgHandler(){\r\n      const inputData = {\r\n        so_no: this.data.so_no,\r\n        fg_no:this.data.fg_no\r\n    };\r\n      this.dbService.onPostRequestHandler(inputData, 'login/checkFgno').subscribe((result) => {\r\n\r\n        console.log(result);\r\n         this.soList = result[`fg`];\r\nconsole.log( this.soList);\r\n    \r\n    this.data.so_no=this.soList.so_no\r\nconsole.log(this.data.so_no);\r\n\r\n  });\r\n    }\r\n    async onGetStateListHandler() {\r\n\r\n        const inputData = {};\r\n\r\n        this.dbService.onPostRequestHandler(inputData, 'task/getStateList').subscribe((result) => {\r\n\r\n              console.log(result);\r\n              // this.stateList = result[`stateList`];\r\n\r\n        });\r\n    }\r\n\r\n    async onGetDistrictListHandler() {\r\n\r\n        this.data.district =  '';\r\n        this.districtList = [];\r\n\r\n        const inputData = {\r\n            stateName: this.data.state[`state_name`]\r\n        };\r\n\r\n        this.dbService.presentLoader();\r\n\r\n        this.dbService.onPostRequestHandler(inputData, 'task/getDistrictList').subscribe((result) => {\r\n\r\n              console.log(result);\r\n              this.dbService.dismissLoader();\r\n              this.districtList = result[`districtList`];\r\n\r\n        });\r\n    }\r\n\r\n\r\n\r\n    async onNextStageHandler(stage) {\r\n\r\n        this.submitted = true;\r\n        console.log(this.registerForm2);\r\n\r\n        if (this['registerForm' + stage + ''].invalid) {\r\n\r\n              if (stage == 1) {\r\n                this['registerForm' + stage + ''].get('name').markAsTouched();\r\n                this['registerForm' + stage + ''].get('designation').markAsTouched();\r\n\r\n                  this['registerForm' + stage + ''].get('companyName').markAsTouched();\r\n                  this['registerForm' + stage + ''].get('email').markAsTouched();\r\n                  // this['registerForm' + stage + ''].get('mobile').markAsTouched();\r\n                  this['registerForm' + stage + ''].get('landlineNo').markAsTouched();\r\n                  this['registerForm' + stage + ''].get('superiorName').markAsTouched();\r\n                  this['registerForm' + stage + ''].get('superioremail').markAsTouched();\r\n                  this['registerForm' + stage + ''].get('so_no').markAsTouched();\r\n                  this['registerForm' + stage + ''].get('fg_no').markAsTouched();\r\n  \r\n\r\n              } else if (stage == 2) {\r\n\r\n                  this['registerForm' + stage + ''].get('street').markAsTouched();\r\n                  this['registerForm' + stage + ''].get('state').markAsTouched();\r\n                  this['registerForm' + stage + ''].get('district').markAsTouched();\r\n                  this['registerForm' + stage + ''].get('city').markAsTouched();\r\n                  this['registerForm' + stage + ''].get('pincode').markAsTouched();\r\n\r\n\r\n              } else if (stage == 3) {\r\n\r\n                  this['registerForm' + stage + ''].get('contactName').markAsTouched();\r\n                  this['registerForm' + stage + ''].get('designation').markAsTouched();\r\n                  this['registerForm' + stage + ''].get('contactEmail').markAsTouched();\r\n                  this['registerForm' + stage + ''].get('contactMobile').markAsTouched();\r\n              }\r\n\r\n              return;\r\n\r\n        } else {\r\n\r\n              console.log(this.data);\r\n\r\n\r\n              // if (this.activeStage == 3) {\r\n\r\n                    if (!this.data.contactName || !this.data.designation || !this.data.contactEmail || !this.data.contactMobile) {\r\n\r\n                         this.dbService.onShowAlertMessage('Error', 'Fill contact complete Detail!');\r\n                         return false;\r\n                    }\r\n\r\n                    this.contactData.push({\r\n\r\n                        contactName: this.data.contactName,\r\n                        designation: this.data.designation,\r\n                        contactEmail: this.data.contactEmail,\r\n                        contactMobile: this.data.contactMobile\r\n                    });\r\n\r\n                    this.data.contactName = '';\r\n                    this.data.contactMobile = '';\r\n                    this.data.designation = '';\r\n                    this.data.contactEmail = '';\r\n\r\n                    this.submitted = false;\r\n\r\n              // } else {\r\n\r\n              //    this.activeStage += 1;\r\n              //    this.submitted = false;\r\n              // }\r\n        }\r\n    }\r\n\r\n    async onDeleteContactHandler(index) {\r\n\r\n      const alert = await this.alertCtrl.create({\r\n        header: 'Confirm',\r\n        message: 'Are You Sure, You Want To Delete Contact ?',\r\n        buttons: [\r\n              {\r\n                text: 'No',\r\n                role: 'cancel',\r\n                handler: () => {\r\n                  console.log('No clicked');\r\n                }\r\n              },\r\n              {\r\n                text: 'Yes',\r\n                handler: () => {\r\n\r\n                     console.log('Yes clicked');\r\n\r\n                     this.contactData.splice(index, 1);\r\n                     this.dbService.presentToast('Contact Deleted Successfully!');\r\n                }\r\n              }\r\n          ]\r\n      });\r\n\r\n      await alert.present();\r\n\r\n    }\r\n\r\n\r\n    async onBackClickHandler(stage)  {\r\n          this.activeStage = stage - 1;\r\n    }\r\n\r\n    get f1() { return this.registerForm1.controls; }\r\n    get f2() { return this.registerForm2.controls; }\r\n    get f3() { return this.registerForm3.controls; }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///","file":"customer_app-registration-registration-module-es5.js"}